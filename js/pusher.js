// Generated by CoffeeScript 1.9.3
var vueInit;

$(document).ready(function() {
  return vueInit();
});

vueInit = function() {
  Vue.config.debug = true;
  Vue.component('phone', {
    props: ['user_id'],
    data: function() {
      return {
        show_element: false,
        hide_element: false,
        connected: false,
        determined: false,
        timer: {
          interval: void 0,
          diff: 0
        },
        mango: {},
        caller: false
      };
    },
    template: '#phone-template',
    methods: {
      hangup: function() {
        $.post('mango/hangup', {
          call_id: this.mango.call_id
        });
        return this.endCall();
      },
      callAppeared: function() {
        this.show_element = true;
        this.determined = false;
        this.caller = false;
        return $.post('mango/getCaller', {
          phone: this.mango.from.number
        }, (function(_this) {
          return function(request) {
            _this.caller = request;
            return _this.determined = true;
          };
        })(this), 'json');
      },
      startCall: function() {
        this.connected = true;
        return this.timer.interval = setInterval((function(_this) {
          return function() {
            var now;
            now = Math.floor(Date.now() / 1000);
            _this.timer.diff = now - _this.mango.timestamp;
            return console.log(now, _this.mango.timestamp, _this.timer.diff);
          };
        })(this), 1000);
      },
      endCall: function() {
        if (this.connected) {
          clearInterval(this.timer.interval);
        }
        this.show_element = false;
        this.hide_element = false;
        return this.connected = false;
      },
      initPusher: function() {
        var channel, pusher;
        pusher = new Pusher('a9e10be653547b7106c0', {
          encrypted: true
        });
        channel = pusher.subscribe("user_" + this.user_id);
        return channel.bind('incoming', (function(_this) {
          return function(data) {
            _this.mango = data;
            switch (data.call_state) {
              case 'Appeared':
                return _this.callAppeared();
              case 'Connected':
                return _this.startCall();
              case 'Disconnected':
                return _this.endCall();
            }
          };
        })(this));
      }
    },
    computed: {
      call_length: function() {
        return moment(parseInt(this.timer.diff) * 1000).format('mm:ss');
      },
      number: function() {
        var n;
        n = this.mango.from.number;
        return "+" + n[0] + " (" + (n.slice(1, 4)) + ") " + (n.slice(4, 7)) + "-" + (n.slice(7, 9)) + "-" + (n.slice(9, 11));
      }
    },
    ready: function() {
      return this.initPusher();
    }
  });
  return new Vue({
    el: '.phone-app'
  });
};
