// Generated by CoffeeScript 1.9.3
var testy,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

testy = 1;

angular.module("Settings", []).filter('to_trusted', [
  '$sce', function($sce) {
    return function(text) {
      return $sce.trustAsHtml(text);
    };
  }
]).controller("CabinetsPageCtrl", function($scope) {
  $scope.weekdays = [
    {
      "short": "ПН",
      "full": "Понедельник"
    }, {
      "short": "ВТ",
      "full": "Вторник"
    }, {
      "short": "СР",
      "full": "Среда"
    }, {
      "short": "ЧТ",
      "full": "Четверг"
    }, {
      "short": "ПТ",
      "full": "Пятница"
    }, {
      "short": "СБ",
      "full": "Суббота"
    }, {
      "short": "ВС",
      "full": "Воскресенье"
    }
  ];
  return $scope.dateToStart = function(date) {
    var D;
    date = date.split(".");
    date = date.reverse();
    date = date.join("-");
    D = new Date(date);
    return moment().to(D);
  };
}).controller("CabinetsCtrl", function($scope) {
  var resetAdd;
  resetAdd = function() {
    $scope.cabinet_add = {
      id_branch: "",
      number: ""
    };
    $scope.$apply();
    return $("#add-branch").selectpicker('render');
  };
  resetAdd();
  $scope.getBranch = function(id_branch) {
    var Branch, i;
    return Branch = ((function() {
      var j, len, ref, results;
      ref = $scope.Branches;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        i = ref[j];
        if (i.id === parseInt(id_branch)) {
          results.push(i);
        }
      }
      return results;
    })())[0];
  };
  $scope.addCabinet = function() {
    var Branch;
    if (!$scope.cabinet_add.id_branch) {
      $(".selectpicker").addClass("has-error").focus();
      return false;
    } else {
      $(".selectpicker").removeClass("has-error");
    }
    if (!$scope.cabinet_add.number) {
      $("#add-number").addClass("has-error").focus();
      return false;
    } else {
      $("#add-number").removeClass("has-error");
    }
    $.post("settings/ajax/addCabinet", $scope.cabinet_add);
    Branch = $scope.getBranch($scope.cabinet_add.id_branch);
    Branch.Cabinets = initIfNotSet(Branch.Cabinets);
    Branch.Cabinets.push({
      id_branch: $scope.cabinet_add.id_branch,
      number: $scope.cabinet_add.number
    });
    return resetAdd();
  };
  return $scope.removeCabinet = function(id_branch, index) {
    $scope.getBranch(id_branch).Cabinets.splice(index, 1);
    return $.post("settings/ajax/removeCabinet", {
      id_branch: id_branch,
      index: index
    });
  };
}).controller("StudentsWithNoGroupCtrl", function($scope) {
  var bindDraggable;
  $scope.search = {
    grades: [],
    branches: [],
    id_subject: ""
  };
  $scope.groupsFilter = function(Group) {
    var ref, ref1;
    if (!Group.hasOwnProperty("grade")) {
      return true;
    }
    return ((ref = String(Group.grade), indexOf.call($scope.search.grades, ref) >= 0) || $scope.search.grades.length === 0) && ((ref1 = String(Group.branch), indexOf.call($scope.search.branches, ref1) >= 0) || $scope.search.branches.length === 0) && (Group.subject === parseInt($scope.search.id_subject) || !$scope.search.id_subject);
  };
  $scope.$watchCollection("search", function(newValue, oldValue) {
    $scope.Groups = newValue.branches.length > 0 ? $scope.GroupsFull : $scope.GroupsShort;
    if ($scope.Groups !== void 0 && $scope.Groups.length > 0) {
      if ($scope.Groups[$scope.Groups.length - 1].hasOwnProperty("grade")) {
        $scope.Groups.push({
          Students: []
        });
      }
    }
    return setTimeout(function() {
      return bindDraggable();
    }, 100);
  });
  $scope.getGroup = function(id_group) {
    var Group, i;
    return Group = ((function() {
      var j, len, ref, results;
      ref = $scope.Groups;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        i = ref[j];
        if (i.id === id_group) {
          results.push(i);
        }
      }
      return results;
    })())[0];
  };
  bindDraggable = function() {
    $(".student-line").draggable({
      helper: 'clone',
      revert: 'invalid',
      start: function(event, ui) {
        $(this).css("visibility", "hidden");
        return $(ui.helper).addClass("tr-helper");
      },
      stop: function(event, ui) {
        return $(this).css("visibility", "visible");
      }
    });
    return $(".group-list-2").droppable({
      tolerance: 'pointer',
      hoverClass: "border-dashed-droppable-hover",
      activeClass: "border-dashed-droppable",
      drop: function(event, ui) {
        var Group, GroupFrom, Groups, Student, group_index, in_group, student_group_index, table;
        group_index = $(this).data("index");
        student_group_index = $(ui.draggable).data("group-index");
        console.log(group_index, student_group_index);
        if (group_index === student_group_index) {
          return;
        }
        Student = $(ui.draggable).data("student");
        Groups = $scope.$eval("Groups | filter:groupsFilter");
        Group = Groups[group_index];
        GroupFrom = Groups[student_group_index];
        in_group = false;
        Group.Students = initIfNotSet(Group.Students);
        $.each(Group.Students, function(index, S) {
          if (S.id === Student.id) {
            return in_group = true;
          }
        });
        if (in_group) {
          notifySuccess("Ученик уже в группе");
        } else {
          Group.Students = objectToArray(Group.Students);
          Group.Students.push(Student);
          GroupFrom.Students = objectToArray(GroupFrom.Students);
          $.each(GroupFrom.Students, function(index, GroupFromStudent) {
            if (GroupFromStudent !== void 0 && GroupFromStudent.id === Student.id) {
              return GroupFrom.Students.splice(index, 1);
            }
          });
          ui.draggable.remove();
          table = $("#group-index-" + student_group_index);
          testy = table;
          if (table.find("tr").length <= 1) {
            table.remove();
          }
        }
        $scope.$apply();
        return bindDraggable();
      }
    });
  };
  $(document).ready(function() {
    $("#group-branch-filter").selectpicker({
      noneSelectedText: "филиалы"
    });
    return $("#grades-select").selectpicker({
      noneSelectedText: "класс",
      multipleSeparator: ", "
    });
  });
  return angular.element(document).ready(function() {
    set_scope("Settings");
    return $.post("settings/ajax/StudentsWithNoGroup", {}, function(response) {
      $scope.Groups = response.GroupsShort;
      $scope.Groups.push({
        Students: []
      });
      $scope.GroupsShort = response.GroupsShort;
      $scope.GroupsFull = response.GroupsFull;
      $scope.$apply();
      return bindDraggable();
    }, "json");
  });
}).controller("StudentsCtrl", function($scope) {
  $scope.weekdays = [
    {
      "short": "ПН",
      "full": "Понедельник"
    }, {
      "short": "ВТ",
      "full": "Вторник"
    }, {
      "short": "СР",
      "full": "Среда"
    }, {
      "short": "ЧТ",
      "full": "Четверг"
    }, {
      "short": "ПТ",
      "full": "Пятница"
    }, {
      "short": "СБ",
      "full": "Суббота"
    }, {
      "short": "ВС",
      "full": "Воскресенье"
    }
  ];
  $scope.search = {
    grade: "",
    id_branch: "",
    id_subject: ""
  };
  $scope.clientsFilter = function(Student) {
    var ref;
    return (Student.Contract.grade === parseInt($scope.search.grade) || !$scope.search.grade) && ((ref = parseInt($scope.search.id_branch), indexOf.call(Student.branches, ref) >= 0) || !$scope.search.id_branch) && (Student.Contract.subjects && (parseInt($scope.search.id_subject) in Student.Contract.subjects || !$scope.search.id_subject));
  };
  return angular.element(document).ready(function() {
    set_scope("Settings");
    return $.post("settings/ajax/getStudents", {}, function(response) {
      $scope.Students = response;
      return $scope.$apply();
    }, "json");
  });
}).controller("VocationsCtrl", function($scope) {
  $scope.schedulde_loaded = false;
  $scope.menu = 1;
  $scope.getLine1 = function(Schedule) {
    return moment(Schedule.date).format("D MMMM YYYY г.");
  };
  $scope.getLine2 = function(Schedule) {
    return moment(Schedule.date).format("dddd");
  };
  $scope.setTime = function(Schedule, event) {
    $(event.target).hide();
    $(event.target).parent().children("input").show().on("changeTime, blur", function(e) {
      var time;
      time = $(this).val();
      if (time) {
        Schedule.time = time;
        $.post("groups/ajax/AddScheduleTime", {
          time: time,
          date: Schedule.date,
          id_group: $scope.Group.id
        });
        $scope.$apply();
      }
      return $(this).hide().parent().children("span").html(time ? time : "не установлено").show();
    }).focus();
    return false;
  };
  $scope.getInitParams = function(el) {
    var current_date, month, year;
    month = parseInt($(el).attr("month"));
    year = month >= 8 ? parseInt(moment().format("YYYY")) : moment().add(1, "years").format("YYYY");
    current_date = new Date(year + "-" + month + "-01");
    return {
      language: 'ru',
      startDate: current_date,
      endDate: moment(current_date).endOf("month").toDate(),
      multidate: true
    };
  };
  $scope.monthName = function(month) {
    return moment().month(month - 1).format("MMMM");
  };
  $scope.dateChange = function(e) {
    var d, t;
    if (!$scope.schedule_loaded) {
      return;
    }
    d = moment(clicked_date).format("YYYY-MM-DD");
    $scope.Group.Schedule = initIfNotSet($scope.Group.Schedule);
    t = $scope.Group.Schedule.filter(function(schedule) {
      return schedule.date === d;
    });
    if (t.length === 0) {
      $scope.Group.Schedule.push({
        date: d
      });
      $.post("groups/ajax/AddScheduleDate", {
        date: d,
        id_group: $scope.Group.id
      });
    } else {
      $.each($scope.Group.Schedule, function(i, v) {
        if (v !== void 0) {
          if (v.date === d) {
            return $scope.Group.Schedule.splice(i, 1);
          }
        }
      });
      $.post("groups/ajax/DeleteScheduleDate", {
        date: d,
        id_group: $scope.Group.id
      });
    }
    return $scope.$apply();
  };
  return angular.element(document).ready(function() {
    var init_dates, j, len, ref, schedule_date;
    set_scope('Group');
    init_dates = [];
    ref = $scope.Group.Schedule;
    for (j = 0, len = ref.length; j < len; j++) {
      schedule_date = ref[j];
      init_dates.push(new Date(schedule_date.date));
    }
    console.log(init_dates);
    $(".calendar-month").each(function() {
      var d, k, len1, m, month_number;
      $(this).datepicker($scope.getInitParams(this)).on("changeDate", $scope.dateChange);
      m = $(this).attr("month");
      for (k = 0, len1 = init_dates.length; k < len1; k++) {
        d = init_dates[k];
        month_number = moment(d).format("M");
        if (month_number === m) {
          $(this).datepicker("_setDate", d);
        }
      }
      return setTimeout(function() {
        $scope.schedule_loaded = true;
        return $scope.$apply();
      }, 500);
    });
    $(".table-condensed").first().children("thead").css("display", "table-caption");
    return $(".table-condensed").eq(15).children("tbody").children("tr").first().remove();
  });
});
