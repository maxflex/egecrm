<?php	// Контроллер отчетов	class ReportsController extends Controller	{		public $defaultAction = "add";				public static $allowed_users = [User::USER_TYPE, Teacher::USER_TYPE, Student::USER_TYPE];				// Папка вьюх		protected $_viewsFolder	= "report";				public function beforeAction()		{						$this->addJs("ng-reports-app");		}				public function actionView()		{			$this->_custom_panel = true;			$Report				= Report::findById($_GET['id']);			$Report->Student	= Student::findById($Report->id_student);			$Report->Teacher	= Teacher::findById($Report->id_teacher);						$ang_init_data = angInit([				"Report" 		=> $Report,			]);						$this->render("view", [				'ang_init_data' => $ang_init_data,			]);		}				public function actionList()		{				$this->_custom_panel = true;						if (User::fromSession()->type == Teacher::USER_TYPE) {				$VisitJournal = VisitJournal::findAll([					"condition" => "id_teacher=" . User::fromSession()->id_entity,					"group"	=> "id_entity, id_subject",				]);								foreach ($VisitJournal as $Data) {					$Student = Student::findById($Data->id_entity);					$Student->Reports = Report::findAll([						"condition" => "id_teacher=" . User::fromSession()->id_entity . " AND id_student=" . $Student->id . " AND id_subject=" . $Data->id_subject					]);					$Student->visit_count = VisitJournal::count([						"condition" => "id_teacher=" . User::fromSession()->id_entity . " AND id_entity=" . $Student->id . " AND id_subject=" . $Data->id_subject					]);										$Student->id_subject	= $Data->id_subject;										$Students[] = $Student;				}								$ang_init_data = angInit([					'Students'	=> $Students,					'Subjects'	=> Subjects::$all,				]);								$this->render("teacher_list", [					'ang_init_data' => $ang_init_data,				]);			}						if (User::fromSession()->type == Student::USER_TYPE) {								$Reports = Report::findAll([					"condition" => "available_for_parents=1 AND id_student=" . User::fromSession()->id_entity				]);								foreach ($Reports as &$R) {					$R->Teacher = Teacher::findById($R->id_teacher);					}								$ang_init_data = angInit([					'Reports' => $Reports,				]);								$this->render("student_list", [					'ang_init_data' => $ang_init_data,				]);			}		}				public function actionEdit()		{			$this->setRights([User::USER_TYPE, Teacher::USER_TYPE]);						$Report = Report::findById($_GET['id']);						$this->actionAdd($Report);		}				public function actionAdd($Report = false)		{			$this->_custom_panel = true;						if ($Report) {				$Report->Student = Student::findById($Report->id_student);				$Report->Teacher = Teacher::findById($Report->id_teacher);			} else {				$id_student = $_GET["id_student"];				$id_subject = $_GET["id_subject"];								$Report = new Report([					"id_student" => $id_student,					"id_subject" => $id_subject,					"id_teacher" => User::fromSession()->id_entity,					]);									$Report->Student = Student::findById($id_student);				$Report->Teacher = Teacher::findById(User::fromSession()->id_entity);			}						$ang_init_data = angInit([				"Report" 	=> $Report,				"Subjects"	=> Subjects::$dative,				]);						$this->render("add", [				'ang_init_data' => $ang_init_data,			]);		}				public function actionStudents()		{			$this->setTabTitle('Записаться на тестирование');						$id_student = User::fromSession()->id_entity;			$Student = Student::findById($id_student);			$Contract = $Student->getLastContract();						$ang_init_data = angInit([			//	"TestingData" 	=> Testing::getAvailable(User::fromSession()->id_entity),				"Testings"		=> Testing::findAll(),				"Subjects"		=> Subjects::$dative,				"id_student"	=> $id_student,				"grade"			=> $Contract->grade,				'minutes_9'		=> Subjects::$minutes_9,				'minutes_11'	=> Subjects::$minutes_11,			]);						$this->render('students', [				"ang_init_data" => $ang_init_data,			]);		}				public function actionAjaxAdd()		{			extract($_POST);						$NewReport = Report::add($Report);						returnJsonAng(				$NewReport->id			);		}				public function actionAjaxEdit()		{			extract($_POST);						Report::updateById($Report['id'], $Report);						preType($Report);		}				public function actionAjaxAddStudent()		{			extract($_POST);						$NewStudent = TestingStudent::add([				"id_student"	=> User::fromSession()->id_entity,				"id_subject"	=> $id_subject,				"id_testing"	=> $id_testing,				"grade"			=> $grade,			]);						returnJsonAng(				$NewStudent->dbData()				);		}				public function actionAjaxSendEmail()		{			extract($_POST);						$Student = Student::findById($Report['id_student']);			$Teacher = Teacher::findById($Report['id_teacher']);			/*			$message = "				<div>Преподаватель: {$Teacher->last_name} {$Teacher->first_name} {$Teacher->middle_name}</div>				<b>Выполнение домашнего задания</b><br>				Оценка: {$Report['homework_grade']}<br>				Комментарий: {$Report['homework_comment']}<br><br>								<b>Работоспособность и активность на уроках</b><br>				Оценка: {$Report['activity_grade']}<br>				Комментарий: {$Report['activity_comment']}<br><br>								<b>Способность усваивать материал</b><br>				Оценка: {$Report['behavior_grade']}</div><br>				Комментарий: {$Report['behavior_comment']}<br><br>								<b>Прогнозируемое количество баллов на экзамене</b><br>				Оценка: {$Report['material_grade']}<br>				Комментарий: {$Report['material_comment']}<br><br>			";	*/						$message = "				Преподаватель: <b>{$Teacher->last_name} {$Teacher->first_name} {$Teacher->middle_name}</b>				<table style='width: 100%; border-collapse:collapse' cellspacing='0'>					<tr>						<td></td>						<td style='color: #A3A3A3'>оценка</td>						<td style='color: #A3A3A3'>комментарий</td>					</tr>					<tr>						<td style='border-top: 1px solid #A3A3A3'>выполнение домашнего задания</td>						<td style='border-top: 1px solid #A3A3A3'>{$Report['homework_grade']}</td>						<td style='border-top: 1px solid #A3A3A3'>{$Report['homework_comment']}</td>					</tr>					<tr>						<td style='border-top: 1px solid #A3A3A3'>работоспособность и активность на уроках</td>						<td style='border-top: 1px solid #A3A3A3'>{$Report['activity_grade']}</td>						<td style='border-top: 1px solid #A3A3A3'>{$Report['activity_comment']}</td>					</tr>					<tr>						<td style='border-top: 1px solid #A3A3A3'>поведение на уроках</td>						<td style='border-top: 1px solid #A3A3A3'>{$Report['behavior_grade']}</td>						<td style='border-top: 1px solid #A3A3A3'>{$Report['behavior_comment']}</td>					</tr>					<tr>						<td style='border-top: 1px solid #A3A3A3'>способность усваивать новый материал</td>						<td style='border-top: 1px solid #A3A3A3'>{$Report['material_grade']}</td>						<td style='border-top: 1px solid #A3A3A3'>{$Report['material_comment']}</td>					</tr>					<tr>						<td style='border-top: 1px solid #A3A3A3'>выполнение контрольных работ, текущий уровень знаний</td>						<td style='border-top: 1px solid #A3A3A3'>{$Report['tests_grade']}</td>						<td style='border-top: 1px solid #A3A3A3'>{$Report['tests_comment']}</td>					</tr>					<tr>						<td style='border-top: 1px solid #A3A3A3'>рекомендации родителям</td>						<td style='border-top: 1px solid #A3A3A3'></td>						<td style='border-top: 1px solid #A3A3A3'>{$Report['recommendation']}</td>					</tr>				</table>			";						if ($Student->Representative && $Student->Representative->email) {				Email::send($Student->Representative->email, "Отчет", $message);								$Report = Report::findById($Report['id']);				$Report->email_sent = true;				$Report->date_sent = now();				$Report->save("email_sent");				$Report->save("date_sent");								returnJsonAng($Report->date_sent);			}		}				public function actionAjaxDelete()		{			extract($_POST);						Testing::deleteById($id_testing);			TestingStudent::deleteAll([				"condition" => "id_testing=$id_testing"			]);		}				public function actionAjaxChangeDate()		{			extract($_POST);						$Cabinets = Cabinet::getByBranch(Branches::TRG);						foreach ($Cabinets as $Cabinet) {				$cabinet_ids[] = $Cabinet->id;			}			$cabinet_ids = implode(',', $cabinet_ids);						// lesson time			$time_data_schedule = GroupSchedule::findAll([				"condition" => "date='$date' AND cabinet IN ($cabinet_ids)",				"order"		=> "time ASC"			]);						foreach ($time_data_schedule as $data) {				$return[$data->cabinet][] = [					'start_time' => $data->time,					'end_time'	 => self::_plusHours($data->time),				];			}						// testing time			$time_data_testing = Testing::findAll([				"condition" => "date='$date' AND cabinet IN ($cabinet_ids)". ($id > 0 ? " AND id!=$id" : ""),				"order"	=> "start_time ASC"			]);						foreach ($time_data_testing as $data) {				$return[$data->cabinet][] = [					'start_time' => $data->start_time,					'end_time'	 => $data->end_time,				];			}						// sort by time			foreach ($return as &$cabinet_time) {				usort($cabinet_time, function($a, $b) {					return $a['start_time'] > $b['start_time'];				});			}						returnJsonAng($return);		}				private static function _plusHours($time, $hours = 2, $minutes = 15)		{			$timestamp = strtotime($time) + 60*60*$hours + (60 * $minutes);			return date('H:i', $timestamp);		}				private static function _generateFutureDates($days = 14) 		{			foreach(range(0, $days) as $day) {				$dates[] = date("Y-m-d", strtotime("+$day days"));			}						return $dates;		}			}