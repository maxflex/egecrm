<?php	// Контроллер загрузок	class UploadController extends Controller	{		public $defaultAction = "AjaxUpload";				// Папка вьюх		protected $_viewsFolder	= "";				// Строка с сообщением об ошибке		const ERROR = "ERROR";				// Временная директория электронных версий договоров		const CONTRACTS_TMP_DIR = "files/contracts/tmp/";				// Временная директория электронных версий договоров		const EMAIL_TMP_DIR = "files/email/tmp/";				##################################################		###################### AJAX ######################		##################################################						/**		 * Загрузка электронной версии договора.		 * 		 */		public function actionAjaxContract() 		{//			preType($_FILES["contract_file"]);			extract($_FILES);						$handle = new upload($contract_file);						if ($handle->uploaded) {				$handle->file_overwrite = true;								// Временный файл//				$handle->file_new_name_ext = 'tmp';								// Даем временное уникальное имя файлу				$handle->file_new_name_body = uniqid("contract_", true);				//				$contract_file["tmp_name"] = BASE_ROOT.self::CONTRACTS_TMP_DIR.$handle->file_new_name_body.".".$handle->file_new_name_ext;												$handle->process(self::CONTRACTS_TMP_DIR);								// указываем размер				$size = round($handle->file_src_size / 1000000, 3); // в мегабайтах, 1 цифра после запятой								// если размер меньше мегабайта, отобразить в киллобайтах				if ($size < 1) {					$size = round($size * 1000) . " Кб";				} else {					$size = round($size, 1) . " Мб";				}								if ($handle->processed) {					toJson([						"name"			=> "tmp/" . $handle->file_dst_name,						"uploaded_name"	=> $contract_file["name"],						"size"			=> $size,						"coords"		=> User::fromSession()->login." ". dateFormat(now()),					]);				} else {					toJson(self::ERROR);				}			} else {				toJson(self::ERROR);			}		}				/**		 * Загрузка файла в email		 * 		 */		public function actionAjaxEmail() 		{			extract($_FILES);									$handle = new upload($email_file);						if ($handle->uploaded) {				$handle->file_overwrite = true;								// Временный файл//				$handle->file_new_name_ext = 'tmp';								// Даем временное уникальное имя файлу				$handle->file_new_name_body = uniqid("email_", true);				//				$contract_file["tmp_name"] = BASE_ROOT.self::CONTRACTS_TMP_DIR.$handle->file_new_name_body.".".$handle->file_new_name_ext;												$handle->process(Email::UPLOAD_DIR);								// указываем размер				$size = round($handle->file_src_size / 1000000, 3); // в мегабайтах, 1 цифра после запятой								// если размер меньше мегабайта, отобразить в киллобайтах				if ($size < 1) {					$size = round($size * 1000) . " Кб";				} else {					$size = round($size, 1) . " Мб";				}								if ($handle->processed) {					toJson([						"name"			=> $handle->file_dst_name,						"uploaded_name"	=> $email_file["name"],						"size"			=> $size,						"coords"		=> User::fromSession()->login." ". dateFormat(now()),					]);				} else {					toJson(self::ERROR);				}			} else {				toJson(self::ERROR);			}		}						/**		 * Загрузка файла в email		 * 		 */		public function actionAjaxTask() 		{			extract($_FILES);									$handle = new upload($task_file);						if ($handle->uploaded) {				$handle->file_overwrite = true;								// Временный файл//				$handle->file_new_name_ext = 'tmp';								// Даем временное уникальное имя файлу				$handle->file_new_name_body = uniqid("task_", true);								$handle->process(Task::UPLOAD_DIR);								// указываем размер				$size = round($handle->file_src_size / 1000000, 3); // в мегабайтах, 1 цифра после запятой								// если размер меньше мегабайта, отобразить в киллобайтах				if ($size < 1) {					$size = round($size * 1000) . " Кб";				} else {					$size = round($size, 1) . " Мб";				}								if ($handle->processed) {					toJson([						"name"			=> $handle->file_dst_name,						"uploaded_name"	=> $task_file["name"],						"size"			=> $size,						"coords"		=> User::fromSession()->login." ". dateFormat(now()),					]);				} else {					toJson(self::ERROR);				}			} else {				toJson(self::ERROR);			}		}			}