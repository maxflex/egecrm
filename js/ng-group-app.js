// Generated by CoffeeScript 1.9.3
var testy,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

testy = false;

angular.module("Group", ['ngAnimate']).filter('toArray', function() {
  return function(obj) {
    var arr;
    arr = [];
    $.each(obj, function(index, value) {
      return arr.push(value);
    });
    return arr;
  };
}).filter('to_trusted', [
  '$sce', function($sce) {
    return function(text) {
      return $sce.trustAsHtml(text);
    };
  }
]).filter('orderByDayNumber', function() {
  return function(items, field, reverse) {
    var filtered;
    console.log(items, field, reverse);
    filtered = [];
    angular.forEach(items, function(item) {
      return filtered.push(item);
    });
    filtered.sort(function(a, b) {
      if (a[field] > b[field]) {
        return 1;
      } else {
        return -1;
      }
    });
    if (reverse) {
      filtered.reverse();
    }
    return filtered;
  };
}).filter('range', function() {
  return function(input, total) {
    var i, j, ref;
    total = parseInt(total);
    for (i = j = 0, ref = total; j < ref; i = j += 1) {
      input.push(i);
    }
    return input;
  };
}).controller("JournalCtrl", function($scope) {
  $scope.grayMonth = function(date) {
    var d;
    d = moment(date).format("M");
    d = parseInt(d);
    return d % 2 === 1;
  };
  $scope.getInfo = function(id_student, date) {
    return _.findWhere($scope.LessonData, {
      id_entity: id_student,
      lesson_date: date
    });
  };
  $scope.formatDate = function(date) {
    return moment(date).format("DD.MM.YY");
  };
  return angular.element(document).ready(function() {
    return set_scope("Group");
  });
}).controller("LessonCtrl", function($scope) {
  var until_save_interval;
  $scope.formatDate = function(date) {
    var D;
    date = date.split(".");
    date = date.reverse();
    date = date.join("-");
    D = new Date(date);
    return moment(D).format("D MMMM YYYY г.");
  };
  $scope.timeUntilSave = function() {
    var data, date_lesson, date_now, diff;
    date_now = new Date();
    date_lesson = new Date($scope.Schedule.date + " " + $scope.Schedule.time + ":00");
    diff = date_now.getTime() - date_lesson.getTime();
    data = {
      seconds: 59 - (Math.floor(diff / 1000) - (Math.floor(diff / 1000 / 60) * 60)),
      minutes: 30 - Math.floor(diff / 1000 / 60)
    };
    if (data.minutes < 0) {
      return true;
    }
    if (data.minutes === 0 && data.seconds <= 0) {
      return true;
    } else {
      return data;
    }
  };
  until_save_interval = setInterval(function() {
    $scope.until_save = $scope.timeUntilSave();
    if ($scope.until_save === true) {
      clearInterval(until_save_interval);
    }
    return $scope.$apply();
  }, 1000);
  $scope.editStudent = function(Student) {
    $scope.EditStudent = Student;
    $scope.EditLessonData = angular.copy($scope.LessonData[$scope.EditStudent.id]);
    clearSelect();
    return lightBoxShow('edit-student');
  };
  $scope.saveStudent = function() {
    $scope.LessonData[$scope.EditStudent.id] = $scope.EditLessonData;
    return lightBoxHide();
  };
  $scope.registerInJournal = function() {
    return bootbox.confirm("Записать запись в журнал?", function(result) {
      if (result === true) {
        if (_.without($scope.LessonData, void 0).length !== $scope.Group.Students.length) {
          return bootbox.alert("Заполните данные по всем ученикам перед записью в журнал");
        } else {
          $scope.saving = true;
          $scope.$apply();
          ajaxStart();
          return $.post("groups/ajax/registerInJournal", {
            id_group: $scope.id_group,
            date: $scope.date,
            data: $scope.LessonData
          }, function(response) {
            ajaxEnd();
            $scope.saving = false;
            $scope.registered_in_journal = true;
            return $scope.$apply();
          });
        }
      }
    });
  };
  $scope.changeRegisterInJournal = function() {
    return bootbox.confirm("Сохранить изменения?", function(result) {
      if (result === true) {
        if (_.without($scope.LessonData, void 0).length !== $scope.Group.Students.length) {
          return bootbox.alert("Заполните данные по всем ученикам перед записью в журнал");
        } else {
          $scope.saving = true;
          $scope.$apply();
          ajaxStart();
          return $.post("groups/ajax/registerInJournalWithoutSMS", {
            id_group: $scope.id_group,
            date: $scope.date,
            data: $scope.LessonData
          }, function(response) {
            ajaxEnd();
            $scope.saving = false;
            $scope.registered_in_journal = true;
            return $scope.$apply();
          });
        }
      }
    });
  };
  return angular.element(document).ready(function() {
    $scope.until_save = $scope.timeUntilSave();
    $scope.$apply();
    return set_scope("Group");
  });
}).controller("ScheduleCtrl", function($scope) {
  $scope.schedulde_loaded = false;
  $scope.formatDate = function(date) {
    return moment(date).format("D MMMM YYYY г.");
  };
  $scope.getLine1 = function(Schedule) {
    return moment(Schedule.date).format("D MMMM YYYY г.");
  };
  $scope.countNotCancelled = function(Schedule) {
    return _.where(Schedule, {
      cancelled: 0
    }).length;
  };
  $scope.studentsToLayeredScheduleTitle = function(Schedule, students) {
    var j, last, len, student, title;
    title = '';
    last = students[students.length - 1];
    for (j = 0, len = students.length; j < len; j++) {
      student = students[j];
      title += student.first_name + ' ' + student.last_name;
      if (last !== student) {
        title += ',';
      }
    }
    Schedule.title = title;
    return $scope.$apply();
  };
  $scope.setTimeFromGroup = function(Group) {
    $.each($scope.Group.Schedule, function(i, v) {
      var d, key;
      if (!v.time) {
        d = moment(v.date).format("d");
        d = parseInt(d);
        if (d === 0) {
          d = 7;
        }
        if (Group.day_and_time[d] !== void 0) {
          key = Object.keys(Group.day_and_time[d])[0];
          v.time = Group.day_and_time[d][key];
          if (Group.id_branch && !v.id_branch) {
            v.id_branch = Group.id_branch;
            $scope.changeBranch(v);
            if (Group.cabinet) {
              return v.cabinet = Group.cabinet;
            }
          }
        }
      }
    });
    $.post("groups/ajax/TimeFromGroup", {
      id_group: Group.id
    }, function(response) {
      if (response) {
        return $.each($scope.Group.Schedule, function(i, v) {
          if (response[v.date]) {
            return $scope.studentsToLayeredScheduleTitle(v, response[v.date]);
          }
        });
      }
    }, "json");
    return $scope.$apply();
  };
  $scope.lessonCount = function() {
    return Object.keys($scope.Group.day_and_time).length;
  };
  $scope.changeFree = function(Schedule) {
    return $.post("groups/ajax/changeScheduleFree", {
      id: Schedule.id,
      is_free: Schedule.is_free
    });
  };
  $scope.changeCabinet = function(Schedule) {
    return $.post("groups/ajax/changeScheduleCabinet", {
      date: Schedule.date,
      id_group: $scope.Group.id,
      cabinet: Schedule.cabinet
    });
  };
  $scope.changeBranch = function(Schedule) {
    return $.post("groups/ajax/changeScheduleBranch", {
      date: Schedule.date,
      id_group: $scope.Group.id,
      id_branch: Schedule.id_branch
    }, function(response) {
      if ($scope.Cabinets[Schedule.id_branch] == null) {
        $scope.Cabinets[Schedule.id_branch] = response;
      }
      return $scope.$apply();
    }, "json");
  };
  $scope.setTime = function(Schedule, event) {
    $(event.target).hide();
    $(event.target).parent().children("input").show().on("changeTime, blur", function(e) {
      var time;
      time = $(this).val();
      if (time) {
        Schedule.time = time;
        $.post("groups/ajax/AddScheduleTime", {
          time: time,
          date: Schedule.date,
          id_group: $scope.Group.id
        }, function(response) {
          if (response) {
            return $scope.studentsToLayeredScheduleTitle(Schedule, response);
          }
        }, "json");
        $scope.$apply();
      }
      return $(this).hide().parent().children("span").html(time ? time : "не установлено").show();
    }).focus();
    return false;
  };
  $scope.inDate = function(date, dates) {
    var ref;
    return ref = moment(date).format("YYYY-MM-DD"), indexOf.call(dates, ref) >= 0;
  };
  $scope.lessonStarted = function(Schedule) {
    var lesson_time;
    lesson_time = new Date(Schedule.date + " " + Schedule.time).getTime();
    return lesson_time < new Date().getTime();
  };
  $scope.getInitParams = function(el) {
    var current_date, month, year;
    month = parseInt($(el).attr("month"));
    year = $scope.Group.year;
    if (month <= 8) {
      year++;
    }
    current_date = new Date(year + "-" + month + "-01");
    console.log(current_date);
    return {
      language: 'ru',
      startDate: current_date,
      endDate: moment(current_date).endOf("month").toDate(),
      multidate: true,
      beforeShowDay: function(d, inst) {
        var add_class;
        if ($scope.inDate(d, $scope.past_lesson_dates)) {
          add_class = 'was-lesson disabled ';
        }
        if ($scope.inDate(d, $scope.vocation_dates)) {
          add_class += ' vocation';
        }
        if ($scope.inDate(d, $scope.exam_dates.other_subject)) {
          add_class += ' exam';
        }
        if ($scope.inDate(d, $scope.exam_dates.this_subject)) {
          add_class += ' exam-subject';
        }
        if ($scope.inDate(d, $scope.cancelled_lesson_dates)) {
          add_class += ' cancelled';
        }
        return add_class;
      }
    };
  };
  $scope.monthName = function(month) {
    return moment().month(month - 1).format("MMMM");
  };
  $scope.dateChange = function(e) {
    var d, t;
    if (!$scope.schedule_loaded) {
      return;
    }
    d = moment(clicked_date).format("YYYY-MM-DD");
    $scope.Group.Schedule = initIfNotSet($scope.Group.Schedule);
    t = $scope.Group.Schedule.filter(function(schedule) {
      return schedule.date === d;
    });
    if (t.length === 0) {
      $scope.Group.Schedule.push({
        date: d,
        cancelled: 0
      });
      $.post("groups/ajax/AddScheduleDate", {
        date: d,
        id_group: $scope.Group.id
      });
    } else {
      $.each($scope.Group.Schedule, function(i, v) {
        if (v !== void 0) {
          if (v.date === d) {
            if (!v.cancelled) {
              v.title = false;
              v.cancelled = 1;
              return $.post("groups/ajax/CancelScheduleDate", {
                date: d,
                id_group: $scope.Group.id
              });
            } else {
              $scope.Group.Schedule.splice(i, 1);
              return $.post("groups/ajax/DeleteScheduleDate", {
                date: d,
                id_group: $scope.Group.id
              });
            }
          }
        }
      });
    }
    return $scope.$apply();
  };
  return angular.element(document).ready(function() {
    var init_dates, j, len, ref, schedule_date;
    set_scope('Group');
    $scope.weekdays = [
      {
        "short": "ПН",
        "full": "Понедельник",
        "schedule": ["", "", $scope.time[1], $scope.time[2]]
      }, {
        "short": "ВТ",
        "full": "Вторник",
        "schedule": ["", "", $scope.time[1], $scope.time[2]]
      }, {
        "short": "СР",
        "full": "Среда",
        "schedule": ["", "", $scope.time[1], $scope.time[2]]
      }, {
        "short": "ЧТ",
        "full": "Четверг",
        "schedule": ["", "", $scope.time[1], $scope.time[2]]
      }, {
        "short": "ПТ",
        "full": "Пятница",
        "schedule": ["", "", $scope.time[1], $scope.time[2]]
      }, {
        "short": "СБ",
        "full": "Суббота",
        "schedule": [$scope.time[3], $scope.time[4], $scope.time[5], $scope.time[6]]
      }, {
        "short": "ВС",
        "full": "Воскресенье",
        "schedule": [$scope.time[3], $scope.time[4], $scope.time[5], $scope.time[6]]
      }
    ];
    init_dates = [];
    ref = $scope.Group.Schedule;
    for (j = 0, len = ref.length; j < len; j++) {
      schedule_date = ref[j];
      init_dates.push(new Date(schedule_date.date));
    }
    $(".calendar-month").each(function() {
      var d, day, k, len1, m, month, month_number, year;
      $(this).datepicker($scope.getInitParams(this)).on("changeDate", $scope.dateChange);
      m = $(this).attr("month");
      for (k = 0, len1 = init_dates.length; k < len1; k++) {
        d = init_dates[k];
        month_number = moment(d).format("M");
        if (month_number === m) {
          year = parseInt(moment(d).format("YYYY"));
          month = parseInt(moment(d).format("M") - 1);
          day = parseInt(moment(d).format("D"));
          $(this).datepicker("_setDate", new Date(Date.UTC.apply(Date, [year, month, day])));
        }
      }
      return setTimeout(function() {
        $scope.schedule_loaded = true;
        return $scope.$apply();
      }, 500);
    });
    $(".table-condensed").first().children("thead").css("display", "table-caption");
    return $(".table-condensed").eq(15).children("tbody").children("tr").first().remove();
  });
}).controller("EditCtrl", function($scope) {
  var bindDraggable, bindGroupsDroppable, initDayAndTime, initFreetime, justSave, rebindBlinking;
  $scope.allStudentStatuses = function() {
    var student_statuses_count;
    student_statuses_count = _.filter($scope.Group.student_statuses, function(s, id_student) {
      return s !== void 0 && s.id_status && _.where($scope.TmpStudents, {
        id: parseInt(id_student)
      }).length;
    });
    return student_statuses_count.length === $scope.TmpStudents.length;
  };
  $scope.smsDialog2 = smsDialog2;
  $scope.getGroup = function(id_group) {
    var Group, i;
    return Group = ((function() {
      var j, len, ref, results;
      ref = $scope.Groups;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        i = ref[j];
        if (i.id === id_group) {
          results.push(i);
        }
      }
      return results;
    })())[0];
  };
  $scope.getSubject = function(subjects, id_subject) {
    return _.findWhere(subjects, {
      id_subject: id_subject
    });
  };
  bindGroupsDroppable = function() {
    return $(".group-list").droppable({
      tolerance: 'pointer',
      hoverClass: "request-status-drop-hover",
      drop: function(event, ui) {
        var Group, id_group, id_student;
        id_group = $(this).data("id");
        id_student = $(ui.draggable).data("id");
        Group = $scope.getGroup(id_group);
        if (indexOf.call(Group.students, id_student) >= 0) {
          return notifySuccess("Ученик уже в группе");
        } else {
          $.post("groups/ajax/AddStudentDnd", {
            id_group: id_group,
            id_student: id_student
          });
          Group.students.push(id_student);
          $scope.removeStudent(id_student);
          return $scope.$apply();
        }
      }
    });
  };
  $scope.dateToStart = function(date) {
    var D;
    date = date.split(".");
    date = date.reverse();
    date = date.join("-");
    D = new Date(date);
    return moment().to(D);
  };
  $scope.search_groups = {
    grade: "",
    id_branch: "",
    id_subject: ""
  };
  $scope.groupsFilter = function(Group) {
    console.log($scope.search_groups.id_teacher, Group, Group.id_teacher);
    return (Group.grade === parseInt($scope.search_groups.grade) || !$scope.search_groups.grade) && (parseInt($scope.search_groups.id_branch) === Group.id_branch || !$scope.search_groups.id_branch) && (parseInt($scope.search_groups.id_subject) === Group.id_subject || !$scope.search_groups.id_subject);
  };
  bindDraggable = function() {
    $(".student-line").draggable({
      helper: 'clone',
      revert: 'invalid',
      start: function(event, ui) {
        $scope.is_student_dragging = true;
        $scope.$apply();
        $(this).css("visibility", "hidden");
        return $(ui.helper).addClass("single-dragging");
      },
      stop: function(event, ui) {
        $scope.is_student_dragging = false;
        $scope.$apply();
        return $(this).css("visibility", "visible");
      }
    });
    return $(".student-dragout").droppable({
      tolerance: 'pointer',
      hoverClass: 'student-dragout-hover',
      drop: function(event, ui) {
        var id_student;
        ui.draggable.remove();
        id_student = $(ui.draggable).data("id");
        $scope.removeStudent(id_student);
        return $scope.$apply();
      }
    });
  };
  $scope.dayAndTime = function() {
    return lightBoxShow("freetime");
  };
  rebindBlinking = function() {
    var blinking;
    blinking = $(".blink");
    blinking.removeClass("blink");
    return setTimeout(function() {
      return blinking.addClass("blink");
    }, 50);
  };
  $scope.dayAndTimeClick = function(index, n) {
    index++;
    $scope.form_changed = true;
    $scope.Group.day_and_time[index] = initIfNotSet($scope.Group.day_and_time[index]);
    if ($scope.Group.day_and_time[index][n] !== true) {
      return $scope.Group.day_and_time[index][n] = "";
    } else {
      return $scope.Group.day_and_time[index][n] = $scope.weekdays[index - 1].schedule[n];
    }
  };
  $scope.saveDayAndTime = function() {
    lightBoxHide();
    return $(".save-button").mousedown();
  };
  initDayAndTime = function(day) {
    $scope.Group.day_and_time = initIfNotSet($scope.Group.day_and_time);
    return $scope.Group.day_and_time[day] = initIfNotSet($scope.Group.day_and_time[day]);
  };
  $scope.inDayAndTime = function(day, value) {
    initDayAndTime(day);
    return $.inArray(value, objectToArray($scope.Group.day_and_time[day])) >= 0;
  };
  $scope.inDayAndTime2 = function(time, freetime) {
    if (freetime === void 0) {
      return false;
    }
    freetime = objectToArray(freetime);
    return $.inArray(time, freetime) >= 0;
  };
  $scope.inCabinetFreetime = function(time, freetime) {
    if (freetime === void 0) {
      return false;
    }
    freetime = objectToArray(freetime);
    return $.inArray(time, freetime) >= 0;
  };
  $scope.justInDayFreetime = function(day, time, freetime) {
    if (freetime === void 0 || freetime === null) {
      return false;
    }
    return $.inArray(time, freetime[day]) >= 0;
  };
  $scope.isOrangeBrick = function(day, time) {
    var current_index;
    return current_index = $.inArray(time, $scope.weekdays[day - 1].schedule);
  };
  $scope.changeYear = function() {
    return $scope.updateGroup({
      year: $scope.Group.year
    });
  };
  $scope.changeCabinet = function() {
    if (!$scope.Group.id) {
      return;
    }
    $scope.reloadSmsNotificationStatuses();
    $scope.updateGroup({
      cabinet: $scope.Group.cabinet
    });
    return $scope.updateCabinetBar();
  };
  $scope.changeTeacher = function() {
    if (!$scope.Group.id) {
      return;
    }
    console.log('changin teacher');
    $.post("groups/ajax/changeTeacher", {
      id_group: $scope.Group.id,
      id_subject: $scope.Group.id_subject,
      id_branch: $scope.Group.id_branch,
      day_and_time: $scope.Group.day_and_time,
      id_teacher: $scope.Group.id_teacher,
      students: $scope.Group.students
    }, function(response) {
      console.log('teacher changed', response);
      $.each(response.teacher_like_statuses, function(id_student, id_status) {
        console.log('hiiaa');
        return $scope.getStudent(id_student).teacher_like_status = id_status;
      });
      if ($scope.Group.id_teacher) {
        $scope.getTeacher($scope.Group.id_teacher).agreement = response.agreement;
      }
      return $scope.$apply();
    }, "json");
    return $scope.updateTeacherBar();
  };
  $scope.updateTeacherBar = function() {
    if ($scope.Group.id_teacher === "0") {
      return;
    }
    ajaxStart();
    return $.post("groups/ajax/GetTeacherBar", {
      id_group: $scope.Group.id,
      id_teacher: $scope.Group.id_teacher,
      id_branch: $scope.Group.id_branch
    }, function(bar) {
      ajaxEnd();
      $scope.getTeacher($scope.Group.id_teacher).bar = bar;
      $scope.$apply();
      return rebindBlinking();
    }, "json");
  };
  $scope.updateCabinetBar = function(ajax_animation) {
    if (ajax_animation == null) {
      ajax_animation = true;
    }
    if (ajax_animation) {
      ajaxStart();
    }
    return $.post("groups/ajax/GetCabinetBar", {
      id_group: $scope.Group.id,
      cabinet: $scope.Group.cabinet
    }, function(bar) {
      if (ajax_animation) {
        ajaxEnd();
      }
      $scope.cabinet_bar = bar;
      $scope.$apply();
      return rebindBlinking();
    }, "json");
  };
  $scope.updateStudentBars = function() {
    return $.post("groups/ajax/GetStudentBars", {
      student_ids: $scope.Group.students,
      id_group: $scope.Group.id,
      id_branch: $scope.Group.id_branch
    }, function(response) {
      console.log(response, 'students');
      $.each(response, function(id_student, bar) {
        return $scope.getStudent(id_student).bar = bar;
      });
      $scope.$apply();
      return rebindBlinking();
    }, "json");
  };
  $scope.updateGroup = function(data) {
    return $.post("groups/ajax/updateGroup", {
      id_group: $scope.Group.id,
      data: data
    });
  };
  $scope.selectAllWorking = function(id_branch) {
    $.each($scope.weekdays, function(index, weekday) {
      if (index > 4) {
        return;
      }
      if ($scope.freetime_selected_all_working) {
        $scope.Group.day_and_time[index + 1][2] = "";
        return $scope.Group.day_and_time[index + 1][3] = "";
      } else {
        $scope.Group.day_and_time[index + 1][2] = weekday.schedule[2];
        return $scope.Group.day_and_time[index + 1][3] = weekday.schedule[3];
      }
    });
    return $scope.freetime_selected_all_working = !$scope.freetime_selected_all_working;
  };
  $scope.selectAllWeek = function() {
    $.each($scope.weekdays, function(index, weekday) {
      if ($scope.freetime_selected_all_week) {
        $scope.Group.day_and_time[index + 1][0] = "";
        $scope.Group.day_and_time[index + 1][1] = "";
        $scope.Group.day_and_time[index + 1][2] = "";
        return $scope.Group.day_and_time[index + 1][3] = "";
      } else {
        $scope.Group.day_and_time[index + 1][0] = weekday.schedule[0];
        $scope.Group.day_and_time[index + 1][1] = weekday.schedule[1];
        $scope.Group.day_and_time[index + 1][2] = weekday.schedule[2];
        return $scope.Group.day_and_time[index + 1][3] = weekday.schedule[3];
      }
    });
    return $scope.freetime_selected_all_week = !$scope.freetime_selected_all_week;
  };
  $scope.selectAllIndex = function(index) {
    $scope.freetime_selected_all_index = initIfNotSet($scope.freetime_selected_all_index);
    $.each($scope.weekdays, function(i, weekday) {
      if ($scope.freetime_selected_all_index[index]) {
        return $scope.Group.day_and_time[i + 1][index] = "";
      } else {
        return $scope.Group.day_and_time[i + 1][index] = weekday.schedule[index];
      }
    });
    return $scope.freetime_selected_all_index[index] = !$scope.freetime_selected_all_index[index];
  };
  $scope.to_students = true;
  $scope.to_representatives = false;
  $scope.to_teacher = false;
  $scope.$watch("[to_students, to_representatives]", function(newValue, oldValue) {
    if (!newValue[0] && !newValue[1]) {
      return $(".ajax-email-button").attr("disabled", "disabled");
    } else {
      return $(".ajax-email-button").removeAttr("disabled");
    }
  });
  $scope.emailDialog = function() {
    var html;
    $("#email-history").html("<center class='text-gray'>загрузка истории сообщений...</center>");
    html = "";
    $.post("ajax/emailHistory", {
      place: "GROUP",
      id_place: $scope.Group.id
    }, function(response) {
      console.log(response);
      if (response !== false) {
        $.each(response, function(i, v) {
          var files_html;
          files_html = "";
          $.each(v.files, function(i, file) {
            return files_html += '<div class="sms-coordinates"><a target="_blank" href="files/email/' + file.name + '" class="link-reverse small">' + file.uploaded_name + '</a><span> (' + file.size + ')</span></div>';
          });
          return html += '<div class="clear-sms">		<div class="from-them">		' + v.message + ' 		<div class="sms-coordinates">' + v.coordinates + '</div>' + files_html + '</div>						</div>';
        });
        return $("#email-history").html(html);
      } else {
        return $("#email-history").html("");
      }
    }, "json");
    $("#email-address").text(("Группа " + $scope.Group.id + " ") + ($scope.Group.is_special ? "(спецгруппа)" : ""));
    return lightBoxShow('email');
  };
  initFreetime = function(freetime, day) {
    freetime = initIfNotSet(freetime);
    freetime[$scope.Group.id_branch] = initIfNotSet(freetime[$scope.Group.id_branch]);
    return freetime[$scope.Group.id_branch][day] = initIfNotSet(freetime[$scope.Group.id_branch][day]);
  };
  $scope.inRedFreetime = function(time, Student, day) {
    if (Student.freetime_red === null) {
      return false;
    }
    return $.inArray(time, Student.freetime_red[day]) >= 0;
  };
  $scope.setStudentStatus = function(Student, event) {
    $(event.target).hide();
    $(".student-status-select-" + Student.id).show(0, function() {
      $(this).simulate('mousedown');
      return $("option[value^='?']").remove();
    });
    return false;
  };
  $scope.setTeacherStatus = function(Teacher, event) {
    $(event.target).hide();
    $(".teacher-status-select-" + Teacher.id).show(0, function() {
      $(this).simulate('mousedown');
      return $("option[value^='?']").remove();
    });
    return false;
  };
  $scope.teachersFilter = function(Teacher) {
    var ref, ref1;
    return ((ref = parseInt($scope.Group.id_branch), indexOf.call(Teacher.branches, ref) >= 0) || !$scope.Group.id_branch) && ((ref1 = parseInt($scope.Group.id_subject), indexOf.call(Teacher.subjects, ref1) >= 0) || !$scope.Group.id_subject);
  };
  $scope.emptyDayFilter = function(day_and_time) {
    return _.filter(day_and_time, function(d) {
      return d.length !== 0;
    });
  };
  $scope.countSubjects = function(Contract) {
    return Object.keys(Contract.subjects).length;
  };
  $(document).on("mouseup", function() {
    $("select[class^='student-status-select'], select[class^='teacher-status-select']").hide();
    return $(".s-s-s, .t-s-s").show();
  });
  $scope.changeReviewStatus = function(id_student) {
    $scope.form_changed = true;
    if ($scope.Group.student_statuses[id_student] === void 0) {
      $scope.Group.student_statuses[id_student] = {
        id_status: 0,
        notified: 0,
        review_status: 0
      };
    }
    $scope.Group.student_statuses[id_student].review_status;
    if ($scope.Group.student_statuses[id_student].review_status === 3) {
      $scope.Group.student_statuses[id_student].review_status = 0;
    } else {
      $scope.Group.student_statuses[id_student].review_status++;
    }
    return $scope.getStudent(id_student).review_status = $scope.Group.student_statuses[id_student].review_status;
  };
  $scope.reloadSmsNotificationStatuses = function() {
    return $.post("groups/ajax/ReloadSmsNotificationStatuses", {
      students: $scope.Group.students,
      id_branch: $scope.Group.id_branch,
      id_subject: $scope.Group.id_subject,
      cabinet: $scope.Group.cabinet,
      first_schedule: $scope.Group.first_schedule
    }, function(response) {
      $.each(response.sms_notification_statuses, function(id_student, id_status) {
        return $scope.getStudent(id_student).sms_notified = id_status;
      });
      return $scope.$apply();
    }, "json");
  };
  $scope.reloadTests = function() {
    return $.post("groups/ajax/ReloadTests", {
      students: $scope.Group.students,
      id_subject: $scope.Group.id_subject,
      grade: $scope.Group.grade
    }, function(response) {
      $.each(response, function(id_student, Test) {
        return $scope.getStudent(id_student).Test = Test;
      });
      return $scope.$apply();
    }, "json");
  };
  $scope.smsNotify = function(Student, event) {
    $(event.target).html("отправка...").removeAttr("ng-click").removeClass("pointer").addClass("default");
    return $.post("groups/ajax/smsNotify", {
      id_student: Student.id,
      id_branch: $scope.Group.id_branch,
      id_subject: $scope.Group.id_subject,
      cabinet: $scope.Group.cabinet,
      first_schedule: $scope.Group.first_schedule,
      id_group: $scope.Group.id
    }, function(response) {
      Student.sms_notified = true;
      return $scope.$apply();
    });
  };
  $scope.smsNotify__DEPRICATED__ = function(id_student) {
    if ($scope.Group.student_statuses[id_student] === void 0) {
      $scope.Group.student_statuses[id_student] = {
        id_status: 0,
        notified: 0,
        review_status: 0
      };
    }
    if ($scope.Group.student_statuses[id_student].notified) {
      return false;
    }
    $scope.Group.student_statuses[id_student].notified = 1;
    $scope.getStudent(id_student).notified = 1;
    $.post("groups/ajax/smsNotify", {
      id_student: id_student,
      id_group: $scope.Group.id
    });
    return justSave();
  };
  $scope.bindGroupStudentStatusChange = function() {
    $("select[class^='student-status-select']").on("input", function() {
      var id_student;
      $(this).hide();
      id_student = $(this).data("id");
      $(".student-status-span-" + id_student).show();
      if ($scope.Group.student_statuses[id_student] === void 0) {
        $scope.Group.student_statuses[id_student] = {
          id_status: 0,
          notified: 0
        };
      }
      return $scope.Group.student_statuses[id_student].id_status = $(this).val();
    });
    return $("select[class^='teacher-status-select']").on("input", function() {
      var id_teacher;
      $(this).hide();
      id_teacher = $(this).data("id");
      $(".teacher-status-span-" + id_teacher).show();
      return $scope.Group.teacher_status = $(this).val();
    });
  };
  $scope.addStudent = function(Student, event) {
    var el, ref;
    if (ref = Student.id, indexOf.call($scope.Group.students, ref) < 0) {
      el = $(event.target);
      el.hide();
      $("#student-adding-" + Student.id).show();
      return $.post("groups/ajax/inGroup", {
        id_student: Student.id,
        id_group: $scope.Group.id,
        id_subject: $scope.Group.id_subject
      }, function(in_other_group) {
        if (!in_other_group) {
          console.log(el);
          el.show();
          $("#student-adding-" + Student.id).hide();
          $scope.Group.students.push(Student.id);
          $scope.TmpStudents = initIfNotSet($scope.TmpStudents);
          $scope.TmpStudents.push(Student);
          $scope.form_changed = true;
          $scope.$apply();
          $scope.bindGroupStudentStatusChange();
          bindDraggable();
          return justSave();
        } else {
          return $("#student-adding-" + Student.id).html("в другой группе");
        }
      }, "json");
    }
  };
  $scope.removeStudent = function(id_student) {
    $.each($scope.Group.students, function(index, data) {
      if (data === id_student) {
        $scope.Group.students.splice(index, 1);
        justSave();
        $scope.form_changed = true;
        return $scope.$apply();
      }
    });
    return $.each($scope.TmpStudents, function(index, data) {
      if (data !== void 0 && data.id === id_student) {
        return $scope.TmpStudents.splice(index, 1);
      }
    });
  };
  $scope.studentAdded = function(id_student) {
    return indexOf.call($scope.Group.students, id_student) >= 0;
  };
  $scope.getStudent = function(id_student) {
    var Student, i;
    id_student = parseInt(id_student);
    return Student = ((function() {
      var j, len, ref, results;
      ref = $scope.TmpStudents;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        i = ref[j];
        if (i.id === id_student) {
          results.push(i);
        }
      }
      return results;
    })())[0];
  };
  $scope.getTeacher = function(id_teacher) {
    var Teacher, i;
    id_teacher = parseInt(id_teacher);
    return Teacher = ((function() {
      var j, len, ref, results;
      ref = $scope.Teachers;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        i = ref[j];
        if (i.id === id_teacher) {
          results.push(i);
        }
      }
      return results;
    })())[0];
  };
  $scope.search = {
    grade: "",
    id_branch: "",
    id_subject: ""
  };
  $scope.clientsFilter = function(Student) {
    var ref;
    return (Student.Contract.grade === parseInt($scope.search.grade) || !$scope.search.grade) && ((ref = parseInt($scope.search.id_branch), indexOf.call(Student.branches, ref) >= 0) || !$scope.search.id_branch) && (Student.Contract.subjects && (parseInt($scope.search.id_subject) in Student.Contract.subjects || !$scope.search.id_subject));
  };
  $scope.deleteGroup = function(id_group) {
    return bootbox.confirm("Вы уверены, что хотите удалить группу №" + id_group + "?", function(result) {
      if (result === true) {
        ajaxStart();
        return $.post("groups/ajax/delete", {
          id_group: id_group
        }, function() {
          return redirect("groups");
        });
      }
    });
  };
  $scope.cabinetTimeBusy = function(cabinet) {
    var busy;
    if ($.isArray(cabinet.freetime)) {
      return false;
    }
    busy = false;
    $.each($scope.Group.day_and_time, function(day, time_data) {
      var freetime;
      if (busy) {
        return;
      }
      if (!cabinet.freetime || (cabinet.freetime[day] == null)) {
        return;
      }
      freetime = objectToArray(cabinet.freetime[day]);
      time_data = objectToArray(time_data);
      if (time_data.length) {
        return $.each(time_data, function(i, time) {
          if (_.contains(freetime, time)) {
            return busy = true;
          }
        });
      }
    });
    clearSelect(50, function() {
      return $("#group-cabinet").selectpicker('refresh');
    });
    return busy;
  };
  $scope.changeBranch = function() {
    $("#group-cabinet").attr("disabled", "disabled");
    ajaxStart();
    return $.post("groups/ajax/getCabinet", {
      id_branch: $scope.Group.id_branch,
      id_group: $scope.Group.id
    }, function(cabinets) {
      ajaxEnd();
      $scope.Cabinets = cabinets;
      if (cabinets !== void 0 && cabinets.length) {
        $scope.Group.cabinet = cabinets[0].id;
      }
      if (cabinets.length !== 1) {
        $("#group-cabinet").removeAttr("disabled");
      }
      $scope.$apply();
      $scope.reloadSmsNotificationStatuses();
      $scope.updateGroup({
        id_branch: $scope.Group.id_branch,
        cabinet: $scope.Group.cabinet
      });
      $scope.updateTeacherBar();
      $scope.updateCabinetBar(false);
      $scope.updateStudentBars();
      return clearSelect(50, function() {
        return $("#group-cabinet").selectpicker('refresh');
      });
    }, "json");
  };
  $scope.addGroupsPanel = function() {
    if (!$scope.Groups) {
      $scope.loadGroups();
    }
    $scope.add_groups_panel = !$scope.add_groups_panel;
    if (!$scope.search_groups.grade && $scope.Group.grade) {
      $scope.search_groups.grade = $scope.Group.grade;
    }
    if (!$scope.search_groups.id_subject && $scope.Group.id_subject) {
      return $scope.search_groups.id_subject = $scope.Group.id_subject;
    }
  };
  $scope.subjectChange = function() {
    if (!$scope.Group.id) {
      return;
    }
    $scope.reloadSmsNotificationStatuses();
    $scope.reloadTests();
    $scope.updateGroup({
      id_subject: $scope.Group.id_subject
    });
    $scope.Group.id_teacher = 0;
    $scope.changeTeacher();
    return clearSelect();
  };
  $scope.$watch("Group.grade", function(newVal, oldVal) {
    if (!$scope.Group.id) {
      return;
    }
    if (newVal !== oldVal) {
      return $scope.updateGroup({
        grade: newVal
      });
    }
  });
  $scope.$watch("Group.teacher_price", function(newVal, oldVal) {
    if (!$scope.Group.id) {
      return;
    }
    if (newVal !== oldVal) {
      return $scope.updateGroup({
        teacher_price: newVal
      });
    }
  });
  $scope.$watch("Group.level", function(newVal, oldVal) {
    if (!$scope.Group.id) {
      return;
    }
    if (newVal !== oldVal) {
      return $scope.updateGroup({
        level: newVal
      });
    }
  });
  $scope.$watch("Group.ended", function() {
    if (!$scope.Group.id) {
      return;
    }
    return $scope.updateGroup({
      ended: $scope.Group.ended
    }, $scope.updateTeacherBar(), $scope.updateCabinetBar(false), $scope.updateStudentBars());
  });
  $scope.loading_groups = false;
  $scope.loadGroups = function() {
    if (!$scope.Group.id) {
      return;
    }
    $scope.Groups = false;
    $scope.loading_groups = true;
    return $.post("groups/ajax/getGroups", {}, function(response) {
      $scope.loading_groups = false;
      $scope.Groups = response;
      $scope.$apply();
      return bindGroupsDroppable();
    }, "json");
  };
  angular.element(document).ready(function() {
    set_scope("Group");
    $scope.weekdays = [
      {
        "short": "ПН",
        "full": "Понедельник",
        "time": [1, 2],
        "schedule": ["", "", $scope.time[1], $scope.time[2]]
      }, {
        "short": "ВТ",
        "full": "Вторник",
        "time": [1, 2],
        "schedule": ["", "", $scope.time[1], $scope.time[2]]
      }, {
        "short": "СР",
        "full": "Среда",
        "time": [1, 2],
        "schedule": ["", "", $scope.time[1], $scope.time[2]]
      }, {
        "short": "ЧТ",
        "full": "Четверг",
        "time": [1, 2],
        "schedule": ["", "", $scope.time[1], $scope.time[2]]
      }, {
        "short": "ПТ",
        "full": "Пятница",
        "time": [1, 2],
        "schedule": ["", "", $scope.time[1], $scope.time[2]]
      }, {
        "short": "СБ",
        "full": "Суббота",
        "time": [3, 4, 5, 6],
        "schedule": [$scope.time[3], $scope.time[4], $scope.time[5], $scope.time[6]]
      }, {
        "short": "ВС",
        "full": "Воскресенье",
        "time": [3, 4, 5, 6],
        "schedule": [$scope.time[3], $scope.time[4], $scope.time[5], $scope.time[6]]
      }
    ];
    $scope.$apply();
    $scope.bindGroupStudentStatusChange();
    if ($scope.Group.Comments === false) {
      $scope.Group.Comments = [];
    }
    return frontendLoadingEnd();
  });
  $scope.form_changed = false;
  $scope.saving = false;
  $(document).ready(function() {
    emailMode(2);
    smsMode(2);
    bindDraggable();
    $("#group-edit").on('keyup change', 'input, select, textarea', function() {
      $scope.form_changed = true;
      return $scope.$apply();
    });
    $("#group-cabinet").selectpicker();
    return set_scope("Group");
  });
  justSave = function() {
    return $.post("groups/ajax/save", $scope.Group);
  };
  return $(".save-button").on("mousedown", function() {
    ajaxStart();
    $scope.saving = true;
    $scope.$apply();
    return $.post("groups/ajax/save", $scope.Group, function(response) {
      console.log(response);
      if ($scope.Group.id) {
        ajaxEnd();
        $scope.saving = false;
        $scope.form_changed = false;
        $scope.updateTeacherBar();
        $scope.updateCabinetBar(false);
        $scope.updateStudentBars();
        return $scope.$apply();
      } else {
        return redirect("groups/edit/" + response);
      }
    });
  });
}).controller("ListCtrl", function($scope, $timeout) {
  var bindDraggable2;
  $scope.updateCache = function() {
    ajaxStart();
    return $.post("groups/ajax/UpdateCacheAll", {}, function() {
      return redirect("groups");
    });
  };
  $scope.createHelper = function() {
    lightBoxShow('contract-stats');
    $scope.create_helper_data = null;
    return $.post("ajax/GroupCreateHelper", {
      id_branch: $scope.search.id_branch,
      subjects: $scope.search.subjects,
      grade: $scope.search.grade
    }, function(response) {
      console.log(response);
      $scope.create_helper_data = response;
      return $scope.$apply();
    }, "json");
  };
  $scope.getMonthByNumber = function(n) {
    return moment().month(n - 1).format("MMMM");
  };
  $scope.getTeacher = function(id) {
    return _.find($scope.Teachers, {
      id: parseInt(id)
    });
  };
  $scope.changeBranch = function() {
    $("#group-cabinet").attr("disabled", "disabled");
    ajaxStart();
    return $.post("groups/ajax/getCabinet", {
      id_branch: $scope.search.id_branch
    }, function(cabinets) {
      ajaxEnd();
      $scope.Cabinets = cabinets;
      $scope.search.cabinet = 0;
      $("#group-cabinet").removeAttr("disabled");
      $scope.$apply();
      return clearSelect();
    }, "json");
  };
  $scope.order_reverse = false;
  $scope.orderByTime = function() {
    $scope.Groups.sort(function(a, b) {
      var day_index_1, day_index_2;
      day_index_1 = Object.keys(a.day_and_time)[0];
      day_index_2 = Object.keys(b.day_and_time)[0];
      if (day_index_1 === void 0) {
        day_index_1 = -1;
      }
      if (day_index_2 === void 0) {
        day_index_2 = -1;
      }
      if (day_index_1 > day_index_2) {
        return 1;
      } else if (day_index_2 > day_index_1) {
        return -1;
      } else {
        a.day_and_time[day_index_1] = initIfNotSet(a.day_and_time[day_index_1]);
        b.day_and_time[day_index_2] = initIfNotSet(b.day_and_time[day_index_2]);
        a.day_and_time[day_index_1] = objectToArray(a.day_and_time[day_index_1]);
        b.day_and_time[day_index_2] = objectToArray(b.day_and_time[day_index_2]);
        if (a.day_and_time[day_index_1] > b.day_and_time[day_index_2]) {
          return 1;
        } else {
          return -1;
        }
      }
    });
    if ($scope.order_reverse) {
      $scope.Groups.reverse();
    }
    return $scope.order_reverse = !$scope.order_reverse;
  };
  $scope.orderByStudentCount = function() {
    $scope.Groups.sort(function(a, b) {
      return a.students.length - b.students.length;
    });
    if ($scope.order_reverse) {
      $scope.Groups.reverse();
    }
    return $scope.order_reverse = !$scope.order_reverse;
  };
  $scope.orderByCabinet = function() {
    $scope.Groups.sort(function(a, b) {
      return a.CabinetInfo.number - b.CabinetInfo.number;
    });
    if ($scope.order_reverse) {
      $scope.Groups.reverse();
    }
    return $scope.order_reverse = !$scope.order_reverse;
  };
  $scope.orderByFirstLesson = function() {
    $scope.Groups.sort(function(a, b) {
      return a.first_schedule - b.first_schedule;
    });
    if ($scope.order_reverse) {
      $scope.Groups.reverse();
    }
    return $scope.order_reverse = !$scope.order_reverse;
  };
  $scope.orderByDaysBeforeExam = function() {
    $scope.Groups.sort(function(a, b) {
      return a.days_before_exam - b.days_before_exam;
    });
    if ($scope.order_reverse) {
      $scope.Groups.reverse();
    }
    return $scope.order_reverse = !$scope.order_reverse;
  };
  $scope.inDayAndTime2 = function(time, freetime) {
    if (freetime === void 0) {
      return false;
    }
    freetime = objectToArray(freetime);
    return $.inArray(time, freetime) >= 0;
  };
  $scope.search = {
    grade: "",
    id_branch: "",
    subjects: [],
    id_teacher: "",
    cabinet: 0
  };
  $scope.search2 = {
    grades: [],
    branches: [],
    id_subject: ""
  };
  $scope.groupsFilter = function(Group) {
    var ref, time_correct;
    if ($scope.search.time && $scope.search.time.length) {
      time_correct = false;
      $.each($scope.search.time, function(index, time) {
        var day, t, time_index;
        t = time.split("-");
        day = t[0];
        time_index = t[1];
        if (Group.day_and_time[day] !== void 0 && Group.day_and_time[day][time_index] !== void 0) {
          time_correct = true;
        }
      });
    } else {
      time_correct = true;
    }
    Group.id_subject = Group.id_subject || 0;
    return time_correct && (Group.grade === parseInt($scope.search.grade) || !$scope.search.grade) && (parseInt($scope.search.id_branch) === Group.id_branch || !$scope.search.id_branch) && ($scope.search.year === Group.year || !$scope.search.year) && ((ref = Group.id_subject.toString(), indexOf.call($scope.search.subjects, ref) >= 0) || $scope.search.subjects.length === 0) && (parseInt($scope.search.id_teacher) === parseInt(Group.id_teacher) || !$scope.search.id_teacher) && (parseInt($scope.search.cabinet) === parseInt(Group.cabinet) || !parseInt($scope.search.cabinet));
  };
  $scope.groupsFilter2 = function(Group) {
    var ref, ref1;
    if (!Group.hasOwnProperty("grade")) {
      return true;
    }
    return ((ref = String(Group.grade), indexOf.call($scope.search2.grades, ref) >= 0) || $scope.search2.grades.length === 0) && ((ref1 = String(Group.branch), indexOf.call($scope.search2.branches, ref1) >= 0) || $scope.search2.branches.length === 0) && (Group.subject === parseInt($scope.search2.id_subject) || !$scope.search2.id_subject);
  };
  $scope.inGroupDay = function(weekday, Group) {
    var days, group_days;
    weekday++;
    days = [];
    group_days = Object.keys(Group.day_and_time);
    $.each(group_days, function(index, day) {
      day = parseInt(day);
      if (days.indexOf(day) === -1) {
        return days.push(day);
      }
    });
    if (days.indexOf(weekday) === -1) {
      return false;
    } else {
      return true;
    }
  };
  $scope.inGroupDays = function(weekday) {
    var Groups, days;
    weekday++;
    Groups = $scope.$eval('Groups | filter:groupsFilter');
    days = [];
    $.each(Groups, function(index, Group) {
      var group_days;
      group_days = Object.keys(Group.day_and_time);
      return $.each(group_days, function(index, day) {
        day = parseInt(day);
        if (days.indexOf(day) === -1) {
          return days.push(day);
        }
      });
    });
    if (days.indexOf(weekday) === -1) {
      return false;
    } else {
      return true;
    }
  };
  $scope.dateToStart = function(date) {
    var D;
    if (date === null) {
      return "";
    }
    date = date.split(".");
    date = date.reverse();
    date = date.join("-");
    D = new Date(date);
    return moment().to(D);
  };
  $scope.$watchCollection("search2", function(newValue, oldValue) {
    $scope.Groups2 = newValue.branches.length > 0 ? $scope.GroupsFull : $scope.GroupsShort;
    if ($scope.Groups2 !== void 0 && $scope.Groups2.length > 0) {
      if ($scope.Groups2[$scope.Groups2.length - 1].hasOwnProperty("grade")) {
        $scope.Groups2.push({
          Students: []
        });
      }
    }
    return setTimeout(function() {
      return bindDraggable2();
    }, 100);
  });
  $scope.search_student = {
    grade: "",
    id_branch: "",
    id_subject: ""
  };
  $scope.clientsFilter = function(Student) {
    var ref;
    return (Student.Contract.grade === parseInt($scope.search_student.grade) || !$scope.search_student.grade) && ((ref = parseInt($scope.search_student.id_branch), indexOf.call(Student.branches, ref) >= 0) || !$scope.search_student.id_branch) && (Student.Contract.subjects && (parseInt($scope.search_student.id_subject) in Student.Contract.subjects || !$scope.search_student.id_subject));
  };
  $scope.getGroup = function(id_group) {
    var Group, i;
    return Group = ((function() {
      var j, len, ref, results;
      ref = $scope.Groups;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        i = ref[j];
        if (i.id === id_group) {
          results.push(i);
        }
      }
      return results;
    })())[0];
  };
  $scope.getSubject = function(subjects, id_subject) {
    return _.findWhere(subjects, {
      id_subject: id_subject
    });
  };
  bindDraggable2 = function() {
    $(".student-line").draggable({
      helper: 'clone',
      revert: 'invalid',
      start: function(event, ui) {
        $(this).css("visibility", "hidden");
        return $(ui.helper).addClass("tr-helper");
      },
      stop: function(event, ui) {
        return $(this).css("visibility", "visible");
      }
    });
    $(".group-list").droppable({
      tolerance: 'pointer',
      hoverClass: "request-status-drop-hover",
      drop: function(event, ui) {
        var Group, id_group, id_student, student_group_index, table;
        id_group = $(this).data("id");
        id_student = $(ui.draggable).data("id");
        Group = $scope.getGroup(id_group);
        if (indexOf.call(Group.students, id_student) >= 0) {
          return notifySuccess("Ученик уже в группе");
        } else {
          $.post("groups/ajax/AddStudentDnd", {
            id_group: id_group,
            id_student: id_student
          });
          Group.students.push(id_student);
          $scope.$apply();
          student_group_index = $(ui.draggable).data("group-index");
          ui.draggable.remove();
          table = $("#group-index-" + student_group_index);
          if (table.find("tr").length <= 1) {
            return table.remove();
          }
        }
      }
    });
    return $(".group-list-2").droppable({
      tolerance: 'pointer',
      hoverClass: "border-dashed-droppable-hover",
      activeClass: "border-dashed-droppable",
      drop: function(event, ui) {
        var Group, Groups, Student, group_index, in_group, student_group_index, table;
        group_index = $(this).data("index");
        student_group_index = $(ui.draggable).data("group-index");
        console.log(group_index, student_group_index);
        if (group_index === student_group_index) {
          return;
        }
        Student = $(ui.draggable).data("student");
        Groups = $scope.$eval("Groups2 | filter:groupsFilter2");
        Group = Groups[group_index];
        in_group = false;
        Group.Students = initIfNotSet(Group.Students);
        $.each(Group.Students, function(index, S) {
          if (S.id === Student.id) {
            return in_group = true;
          }
        });
        if (in_group) {
          notifySuccess("Ученик уже в группе");
        } else {
          Group.Students = objectToArray(Group.Students);
          Group.Students.push(Student);
          ui.draggable.remove();
          table = $("#group-index-" + student_group_index);
          testy = table;
          if (table.find("tr").length <= 1) {
            table.remove();
          }
        }
        $scope.$apply();
        return bindDraggable2();
      }
    });
  };
  $scope.students_picker = false;
  $scope.loadStudentPicker = function() {
    $scope.students_picker = true;
    $("html, body").animate({
      scrollTop: $(document).height()
    }, 1000);
    return $.post("ajax/StudentsWithNoGroup", {}, function(response) {
      $scope.StudentsWithNoGroup = response;
      $scope.$apply();
      return bindDraggable2();
    }, "json");
  };
  $scope.yearLabel = function(year) {
    return year + '-' + (parseInt(year) + 1) + ' уч. г.';
  };
  $scope.refreshCounts = function() {
    return $timeout(function() {
      $('.watch-select option').each(function(index, el) {
        $(el).data('subtext', $(el).attr('data-subtext'));
        return $(el).data('content', $(el).attr('data-content'));
      });
      return $('.watch-select').selectpicker('refresh', 100);
    });
  };
  $scope.filter = function() {
    $.cookie("groups", JSON.stringify($scope.search), {
      expires: 365,
      path: '/'
    });
    $scope.current_page = 1;
    return $scope.getByPage($scope.current_page);
  };
  $scope.pageChanged = function() {
    console.log($scope.currentPage);
    if ($scope.current_page > 1) {
      window.history.pushState({}, '', 'groups/?page=' + $scope.current_page);
    }
    return $scope.getByPage($scope.current_page);
  };
  $scope.getByPage = function(page) {
    $scope.Groups = void 0;
    frontendLoadingStart();
    return $.post("groups/ajax/get", {
      page: page
    }, function(response) {
      frontendLoadingEnd();
      $scope.Groups = response.data;
      $scope.teacher_ids = response.teacher_ids;
      $scope.counts = response.counts;
      $scope.$apply();
      if ($scope.students_picker) {
        bindDraggable2();
      }
      return $scope.refreshCounts();
    }, "json");
  };
  $scope.teachersFilter2 = function(Teacher) {
    var ref;
    if ($scope.teacher_ids === void 0) {
      return true;
    }
    if ((ref = Teacher.id, indexOf.call($scope.teacher_ids, ref) >= 0) || Teacher.id === parseInt($scope.search.id_teacher)) {
      return true;
    }
    return false;
  };
  $scope.getGrades = function(Grades) {
    console.log('grades', Grades);
    return Grades;
  };
  $(document).ready(function() {
    var error;
    try {
      if ($("#subjects-select").length) {
        $("#subjects-select").selectpicker({
          noneSelectedText: "предметы"
        });
      }
      if ($("#time-select").length) {
        $("#time-select").selectpicker({
          noneSelectedText: "время занятия"
        });
      }
      $("#group-branch-filter2").selectpicker({
        noneSelectedText: "филиалы"
      });
      return $("#grades-select2").selectpicker({
        noneSelectedText: "класс",
        multipleSeparator: ", "
      });
    } catch (_error) {
      error = _error;
    }
  });
  return angular.element(document).ready(function() {
    set_scope("Group");
    $scope.weekdays = [
      {
        "short": "ПН",
        "full": "Понедельник",
        "schedule": ["", "", $scope.time[1], $scope.time[2]]
      }, {
        "short": "ВТ",
        "full": "Вторник",
        "schedule": ["", "", $scope.time[1], $scope.time[2]]
      }, {
        "short": "СР",
        "full": "Среда",
        "schedule": ["", "", $scope.time[1], $scope.time[2]]
      }, {
        "short": "ЧТ",
        "full": "Четверг",
        "schedule": ["", "", $scope.time[1], $scope.time[2]]
      }, {
        "short": "ПТ",
        "full": "Пятница",
        "schedule": ["", "", $scope.time[1], $scope.time[2]]
      }, {
        "short": "СБ",
        "full": "Суббота",
        "schedule": [$scope.time[3], $scope.time[4], $scope.time[5], $scope.time[6]]
      }, {
        "short": "ВС",
        "full": "Воскресенье",
        "schedule": [$scope.time[3], $scope.time[4], $scope.time[5], $scope.time[6]]
      }
    ];
    $scope.search = $.cookie("groups") ? JSON.parse($.cookie("groups")) : {};
    $scope.current_page = $scope.currentPage;
    $scope.pageChanged();
    $(".single-select").selectpicker();
    setTimeout(function() {
      return $scope.$apply();
    }, 25);
    return frontendLoadingEnd();
  });
}).controller("StudentListCtrl", function($scope) {
  return console.log('init');
}).controller("TeacherListCtrl", function($scope) {
  return console.log('init');
});
