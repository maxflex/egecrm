<?php	// Контроллер	class RequestController extends Controller	{		public $defaultAction = "List";				// Папка вьюх		protected $_viewsFolder	= "request";								/** 		 * BEFORE ACTION.		 * 		 */		public function beforeAction()		{			// Скрипт контроллера			$this->addJs("ng-request-app");		}				/**		 * Информация по заявке.		 * 		 */		public function actionEdit()		{ 			// Находим заявку по ID			$Request = Request::findById($_GET["id"]);						if ($Request->adding) {				$this->setTabTitle("Добавление профиля ученика");			} else {				// Добавляем заголовок, в него пишем дубликаты заявки, если есть				$this->setTabTitle("Редактирование профиля ученика №" . $Request->Student->id);			}						// Добавляем JS и CSS			$this->addJs("bootstrap-select, jquery.ui.widget, jquery.iframe-transport, jquery.fileupload, gmaps.functions");			$this->addJs("//maps.google.ru/maps/api/js?libraries=places", true);			$this->addCss("bootstrap-select");						# Генерируем данные для ангуляра			$ang_init_data = angInit([				# Основные данные				"payment_statuses"	=> Payment::$all,				"id_request"		=> $Request->id,					// ID текущей заявки				"user"				=> User::fromSession()->dbData(),				"request_duplicates"=> $Request->getDuplicates(true),	// получить дубликаты, включая свой ID				# Данные ученика				"server_markers"=> $Request->Student->getMarkers(),		// Метки ученика				"payments"		=> $Request->Student->getPayments(),	// Платежи ученика				"freetime"		=> $Request->Student->getFreetime(),	// Свободное время ученика				"contracts"		=> $Request->Student->getContracts(),	// Договоры ученика				"student"		=> $Request->Student,  // Данные по ученику для печати				"student_phone_level" => $Request->Student->phoneLevel(),				# Данные представителя				"representative_phone_level"	=> ($Request->Student->Representative ? $Request->Student->Representative->phoneLevel() : 1), // уровень телефона 1, если нет представителя				"representative"				=> ($Request->Student->Representative ? $Request->Student->Representative : new Representative()),  // для печати			]);			//			preType($Request->Student->getContracts(), false);//			var_dump($Request->Student->getContracts()[0]->files);							# Передача во view			$this->render("edit", [				"Request"		=> $Request,				"User"			=> User::fromSession(),				"ang_init_data"	=> $ang_init_data,			]);		}						/**		 * Список заявок.		 * 		 */		public function actionList()		{							$this->setTabTitle("Заявки");						// Получаем выбранный список заявок			$id_status = Request::getIdStatus();						// Получаем новые заявки			$Requests = Request::getByPage(1, $id_status);									// Получаем сколько новых, в отказе и тд.			$RequestStatusesCount = Request::getAllStatusesCount();						// Данные для ангуляра			$ang_init_data = angInit([				"requests" 				=> $Requests,				"request_statuses"		=> RequestStatuses::get(),				"request_statuses_count"=> $RequestStatusesCount,				"chosen_list"			=> $id_status							]);						$this->render("list", [				"ang_init_data"	=> $ang_init_data,			]);		}						/**		 * Добавление заявки.		 * 		 */		public function actionAdd()		{			// Добавляем заявку			$Request = new Request([				"id_user_created"	=> User::fromSession()->id,			//	"id_status"			=> RequestStatuses::CUSTOM,				"adding" 			=> 1,			]);						// Создаем нового ученика по заявке, либо привязываем к уже существующему			$Request->createStudent();						// Сохраняем заявку			$Request->save();						// Редиректим на редактирование заявки			// $this->redirect("requests/edit/" . $Request->id, true);			$_GET["id"] = $Request->id;			$this->actionEdit();		}								##################################################		###################### AJAX ######################		##################################################				/**		 * Редактирование заявки – основное сохранение.		 * 		 */		public function actionAjaxSave()		{				preType($_POST, false); // debug info//			preType($_FILES, true);						# ЗАЯВКА			// Получаем ID заявки			$id_request = $_POST["id_request"];								// Находим заявку			$Request = Request::findById($id_request);						// Обновляем данные (без сохранения, сохраняем в конце)			$Request->update($_POST["Request"], false);						// Если это первое сохранение, запоминаем данные сохранившего			// нельзя переносить в beforeSave() !!!! тут было подумано.			if (!$Request->id_first_save_user) {				$Request->id_first_save_user 	= User::fromSession()->id;				$Request->first_save_date 		= now();			}						# НАПОМИНАНИЕ			if ($Request->Notification) {				// если не установлен тип нотификации, то удалить ее				if (!$_POST["Notification"]["id_type"]) {					$Request->Notification->delete();								} else {					$Request->Notification->update($_POST["Notification"]); // обновить и сохранить данные									}			} else {				// инача создаем новое уведомление				if ($Notification = Notification::add($_POST["Notification"])) {					$Request->addRelation("Notification", $Notification);				}			}						# СТУДЕНТ			// Если студент найден			if ($Request->Student) {				$Request->Student->update($_POST["Student"]); // обновить и сохранить данные			} else {				// инача создаем нового студента				if ($Student = Student::add($_POST["Student"])) {					$Request->addRelation("Student", $Student);				}			}						// Если добавили студента (ИНАЧЕ ВООБЩЕ НИКАКИЕ ДАННЫЕ НЕ СОХРАНЯТСЯ)			if ($Request->Student) {				# МЕТКИ СТУДЕНТА				$Request->Student->addMarkers($_POST["marker_data"]);								# СВОБОДНОЕ ВРЕМЯ СТУДЕНТА				Freetime::addData($_POST["freetime_json"], $Request->Student->id);								# ПАСПОРТ УЧЕНИКА				// Если паспорт найден				if ($Request->Student->Passport) {					$Request->Student->Passport->update($_POST["StudentPassport"]);				} else {					// Если данные паспорта были введены					if (hasValues($_POST["StudentPassport"])) {						$StudentPassport = Passport::add($_POST["StudentPassport"] + ["type" => Passport::TYPE_STUDENT]); // добавляем тип по умолчанию						$Request->Student->addRelation("Passport", $StudentPassport, true); // добавляем взаимосвязь и сохраняем id_passport					}				}								# ПРЕДСТАВИТЕЛЬ				// Если есть представитель у ученика				if ($Request->Student->Representative) {					$Request->Student->Representative->update($_POST["Representative"]); // обновить и сохранить данные				} else {					// Иначе создаем нового представителя					if ($Representative = Representative::add($_POST["Representative"])) {						$Request->Student->addRelation("Representative", $Representative); // добавляем вместе с видимостью $Request->Representative					}				}								# ПАСПОРТ ПРЕДСТАВИТЕЛЯ				// Если паспорт найден				if ($Request->Student->Representative->Passport) {					$Request->Student->Representative->Passport->update($_POST["Passport"]);				} else {					// Если данные паспорта были введены					if (hasValues($_POST["Passport"])) {						$Passport = Passport::add($_POST["Passport"] + ["type" => Passport::TYPE_REPRESENTATIVE]); // добавляем тип по умолчанию						$Request->Student->Representative->addRelation("Passport", $Passport, true); // добавляем взаимосвязь и сохраняем id_passport					}				}								# ДОГОВОРЫ				// Добавляем новые договоры и обновляем измененные существующие				Contract::addAndUpdate($_POST["Contract"], $Request->Student->id);/*				// Если договор уже существует				if ($Request->Student->Contract) {					$Request->Student->Contract->update($_POST["Contract"]);				} else {					if ($Contract = Contract::add($_POST["Contract"])) {						$Request->Student->addRelation("Contract", $Contract); // Добавляем взаимосвязь с контрактом					}				}								# ПРЕДМЕТЫ ДОГОВОРА				ContractSubject::addData($_POST["subjects_json"], $Request->Contract->id);*/								# ПЛАТЕЖИ ЗАЯВКИ				Payment::addData($_POST["Payment"], $Request->Student->id);								// Сохраняем все изменения по студенту				$Request->Student->save();			}												// Сохраняем все изменения заявки			$Request->save();		}						/**		 * Получить по странице и списку.		 * 		 */		public function actionAjaxGetByPage()		{			extract($_GET);			returnJSON(Request::getByPage($page, $id_status));		}						/**		 * Найти студента по ID.		 * 		 */		public function actionAjaxGetStudent()		{			extract($_GET);						returnJSON(Student::findById($id));		}						/**		 * Присвоить заявку ученику (склейка клиентов).		 * 		 * @access public		 * @return void		 */		public function actionAjaxGlueRequest()		{			extract($_POST);						$Request = Request::findById($id_request);						returnJSON($Request->bindToStudent($id_student));		}	}