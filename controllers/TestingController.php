<?php	// Контроллер	class TestingController extends Controller	{		public $defaultAction = "list";		public static $allowed_users = [User::USER_TYPE, Teacher::USER_TYPE, Student::USER_TYPE];		// Папка вьюх		protected $_viewsFolder	= "testing";		public function beforeAction()		{			$this->addJs("ng-testing-app, dnd-new");		}		public function actionList()		{			$this->setTabTitle("Пробные тестирования");			$ang_init_data = angInit([				"Testings" 	=> Testing::findAll(),				'Subjects'	=> Subjects::$three_letters,			]);			$this->render("list", [				'ang_init_data' => $ang_init_data,			]);		}		public function actionEdit()		{			$Testing = Testing::findById($_GET['id']);			$this->actionAdd($Testing);		}		public function actionAdd($Testing = false)		{			if ($Testing) {				$this->setTabTitle('Редактирование тестирования №' . $Testing->id);				$this->setRightTabTitle("<span class='link-like link-white link-reverse' onclick='ang_scope.deleteTesting({$Testing->id})'>удалить тестирование</span>");			} else {				$this->setTabTitle("Добавление тестирования");			}			$Cabinets = Cabinet::getByBranch(Branches::TRG);			$ang_array = [				'future_dates' 	=> self::_generateFutureDates(),				'Cabinets'		=> $Cabinets,				'Students'		=> Student::getAllList(),				'Subjects'		=> Subjects::$three_letters,				'SubjectsFull'	=> Subjects::$all,				'minutes_9'		=> Subjects::$minutes_9,				'minutes_11'	=> Subjects::$minutes_11,                'user'			=> User::fromSession()->dbData(),            ];			if ($Testing) {				$ang_array['Testing'] = $Testing;			}			$ang_init_data = angInit($ang_array);			$this->render("add", [				'ang_init_data' => $ang_init_data,				'Testing'		=> $Testing,			]);		}		public function actionStudents()		{			$this->setTabTitle('Записаться на тестирование');			$id_student = User::fromSession()->id_entity;			$Student = Student::findById($id_student);			$Contract = $Student->getLastContract();			$ang_init_data = angInit([				"Testings"		=> Testing::findAll(),				"Subjects"		=> Subjects::$dative,				"id_student"	=> $id_student,				"grade"			=> $Contract->grade,				'minutes_9'		=> Subjects::$minutes_9,				'minutes_11'	=> Subjects::$minutes_11,			]);			$this->render('students', [				"ang_init_data" => $ang_init_data,			]);		}		public function actionAjaxAdd()		{			extract($_POST);			$Testing['subjects_9'] 	= array_filter($Testing['subjects_9']);			$Testing['subjects_11'] = array_filter($Testing['subjects_11']);			$Testing['subjects_9']	= array_keys($Testing['subjects_9']);			$Testing['subjects_11'] = array_keys($Testing['subjects_11']);			$NewTesting = Testing::add($Testing);			returnJsonAng(				$NewTesting->id			);		}		public function actionAjaxSave()		{			extract($_POST);			$Testing['subjects_9'] 	= array_filter($Testing['subjects_9']);			$Testing['subjects_11'] = array_filter($Testing['subjects_11']);			$Testing['subjects_9']	= array_keys($Testing['subjects_9']);			$Testing['subjects_11'] = array_keys($Testing['subjects_11']);			Testing::updateById($Testing['id'], $Testing);			preType($Testing);		}		public function actionAjaxAddStudent()		{			extract($_POST);			$NewStudent = TestingStudent::add([				"id_student"	=> User::fromSession()->id_entity,				"id_subject"	=> $id_subject,				"id_testing"	=> $id_testing,				"grade"			=> $grade,			]);			returnJsonAng(				$NewStudent->dbData()			);		}		public function actionAjaxDelete()		{			extract($_POST);			Testing::deleteById($id_testing);			TestingStudent::deleteAll([				"condition" => "id_testing=$id_testing"			]);		}		public function actionAjaxChangeDate()		{			extract($_POST);			$Cabinets = Cabinet::getByBranch(Branches::TRG);			foreach ($Cabinets as $Cabinet) {				$cabinet_ids[] = $Cabinet->id;			}			$cabinet_ids = implode(',', $cabinet_ids);			// lesson time			// @refactored			$time_data_schedule = GroupSchedule::findAll([				"condition" => "date='$date' AND cabinet IN ($cabinet_ids) AND cancelled=0",				"order"		=> "time ASC"			]);			foreach ($time_data_schedule as $data) {				$return[$data->cabinet][] = [					'start_time' => $data->time,					'end_time'	 => self::_plusHours($data->time),				];			}			// testing time			$time_data_testing = Testing::findAll([				"condition" => "date='$date' AND cabinet IN ($cabinet_ids)". ($id > 0 ? " AND id!=$id" : ""),				"order"	=> "start_time ASC"			]);			foreach ($time_data_testing as $data) {				$return[$data->cabinet][] = [					'start_time' => $data->start_time,					'end_time'	 => $data->end_time,				];			}			// sort by time			foreach ($return as &$cabinet_time) {				usort($cabinet_time, function($a, $b) {					return $a['start_time'] > $b['start_time'];				});			}			returnJsonAng($return);		}        public function actionAjaxGetStudentGroupsBySubject()        {            extract($_POST);            returnJsonAng(VisitJournal::getGroupIdsBySubject($id_student, $id_subject, $grade));        }		private static function _plusHours($time, $hours = 2, $minutes = 15)		{			$timestamp = strtotime($time) + 60*60*$hours + (60 * $minutes);			return date('H:i', $timestamp);		}		private static function _generateFutureDates($days = 14)		{			foreach(range(0, $days) as $day) {				$dates[] = date("Y-m-d", strtotime("+$day days"));			}			return $dates;		}	}