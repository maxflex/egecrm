<?php	// Контроллер	class RatingController extends Controller	{		public $defaultAction = "rating";				// Папка вьюх		protected $_viewsFolder	= "rating";				// Кто может редактировать кружочки (нагрузка)		static $CAN_EDIT_BRANCHLOAD = [1, 69, 93];				public function beforeAction()		{			$this->addJs("ng-rating-app");		}				public function actionRating()		{			$this->setTabTitle("Рейтинг филиалов");						foreach (Branches::$all as $id_branch => $name) {				$data = self::_actualRating($id_branch);								$rating_actual = 0;				foreach ($data as $grade => $rating_data) {					foreach ($rating_data as $id_subject => $rating) {						$rating_actual += $rating;					}				}								$total_rating[$id_branch] = $rating_actual;			}									asort($total_rating);			$total_rating = array_reverse($total_rating, true);						$ang_init_data = angInit([				"BranchLoad" => BranchLoad::getSorted()			]);						$this->render("rating", [				"ang_init_data" => $ang_init_data,				"rating"	=> $total_rating,			]);		}				public function actionBranchRating()		{			$id_branch = $_GET['id_branch'];						$this->setTabTitle("Рейтинг филиала ".Branches::getById($id_branch));						$data1 	= self::_actualRating($id_branch);			$data2 	= self::_uniqueRating($id_branch);			$data3	= self::_maxRating($id_branch);						$ang_init_data = angInit([				"BranchLoad"	=> BranchLoad::getSortedBranch($id_branch),				"Branches"		=> Branches::$short,				"data1"			=> $data1,				"data2"			=> $data2,				"data3"			=> $data3,			]);						$this->render("branch_rating", [				"ang_init_data" => $ang_init_data,				"id_branch" 	=> $id_branch,			]);		}				public function actionSubjectRating()		{			$id_subject = $_GET['id_subject'];			$this->setTabTitle("Рейтинг предмета ".Subjects::getById($id_subject));						foreach (Branches::$all as $id_branch => $name) {				$data1[$id_branch] = self::_actualRating($id_branch);				$data2[$id_branch] = self::_uniqueRating($id_branch);				$data3[$id_branch] = self::_maxRating($id_branch);			}						$sumRating = self::_sumRating();						$ang_init_data = angInit([				"BranchLoad"	=> BranchLoad::getSortedSubject($id_subject),				"Subjects"		=> Subjects::$all,				"data1"			=> $data1,				"data2"			=> $data2,				"data3"			=> $data3,			]);						$this->render("subject_rating", [				"ang_init_data" => $ang_init_data,				"sumRating"	=> $sumRating,				"id_subject" 	=> $id_subject,			]);		}				public function actionSum()		{			$sumRating = self::_sumRating();			for ($i = 1; $i <= 11; $i++) {				foreach ($sumRating[$i] as $score) {					$sumRatingGroupedByGrade[$i] += $score;				}			}						$this->setTabTitle("В сумме по всем филиалам");						$this->render("sum", [				"sumRatingGroupedByGrade"	=> $sumRatingGroupedByGrade,				"result" 					=> $sumRating,			]);		}				private function _actualRating($id_branch)		{			if (LOCAL_DEVELOPMENT) {				// Актуальный рейтинг из договоров				$Students = Student::getWithContractByBranch($id_branch);								foreach ($Students as $Student) {					$Contracts = $Student->getActiveContracts();					foreach ($Contracts as $Contract) {						foreach ($Contract->subjects as $Subject) {							$id_subject = $Subject['id_subject'];														// количество филиалов без учета Тургеневской							$branches_count = count($Student->branches);														$result[$Contract->grade][$id_subject] += round(1 / $branches_count, 1);						}					}				}				return $result;			} else {				$return = memcached()->get("Rating[$id_branch]");				if (!$return) {					// Актуальный рейтинг из договоров					$Students = Student::getWithContractByBranch($id_branch);										foreach ($Students as $Student) {						$Contracts = $Student->getActiveContracts();						foreach ($Contracts as $Contract) {							foreach ($Contract->subjects as $Subject) {								$id_subject = $Subject['id_subject'];																// количество филиалов без учета Тургеневской								$branches_count = count($Student->branches);																$result[$Contract->grade][$id_subject] += round(1 / $branches_count, 1);							}						}					}										$return = $result;															memcached()->set("Rating[$id_branch]", $return, 1 * 3600); // кеш на 1 час				}			}						return $return;		}						/**		 * Уникальные – это значит показать только тех учеников, которые указали этот и только этот филиал.		 * 		 * @access private		 * @param mixed $id_branch		 * @return void		 */		private function _uniqueRating($id_branch)		{			if (LOCAL_DEVELOPMENT) {				// Актуальный рейтинг из договоров				$Students = Student::getWithContractByBranch($id_branch);								foreach ($Students as $Student) {					if ($Student->branches[0] == $id_branch && count($Student->branches) === 1) {						$Contracts = $Student->getActiveContracts();						foreach ($Contracts as $Contract) {							foreach ($Contract->subjects as $Subject) {								$id_subject = $Subject['id_subject'];								$result[$Contract->grade][$id_subject]++;							}						}					}				}								return $result;			} else {				$result = memcached()->get("UniqueRating[$id_branch]");				if (!$result) {					// Актуальный рейтинг из договоров					$Students = Student::getWithContractByBranch($id_branch);										foreach ($Students as $Student) {						if ($Student->branches[0] == $id_branch && count($Student->branches) === 1) {							$Contracts = $Student->getActiveContracts();							foreach ($Contracts as $Contract) {								foreach ($Contract->subjects as $Subject) {									$id_subject = $Subject['id_subject'];									$result[$Contract->grade][$id_subject]++;								}							}						}					}										memcached()->set("UniqueRating[$id_branch]", $result, 1 * 3600); // кеш на 1 час				}									return $result;			}			}						/**		 * максимально возможно. Это количество учеников, которые по конкретному предмету и классу указали данный филиал		 * 		 * @access private		 * @param mixed $id_branch		 * @return void		 */		private function _maxRating($id_branch)		{			if (LOCAL_DEVELOPMENT) {				// Актуальный рейтинг из договоров				$Students = Student::getWithContractByBranch($id_branch);								foreach ($Students as $Student) {					$Contracts = $Student->getActiveContracts();					foreach ($Contracts as $Contract) {						foreach ($Contract->subjects as $Subject) {							$id_subject = $Subject['id_subject'];							$result[$Contract->grade][$id_subject]++;						}					}				}								return $result;				} else {				$result = memcached()->get("MaxRating[$id_branch]");				if (!$result) {					// Актуальный рейтинг из договоров					$Students = Student::getWithContractByBranch($id_branch);										foreach ($Students as $Student) {						$Contracts = $Student->getActiveContracts();						foreach ($Contracts as $Contract) {							foreach ($Contract->subjects as $Subject) {								$id_subject = $Subject['id_subject'];								$result[$Contract->grade][$id_subject]++;							}						}					}										memcached()->set("MaxRating[$id_branch]", $result, 1 * 3600); // кеш на 1 час				}								return $result;					}		}				private function _sumRating()		{			if (LOCAL_DEVELOPMENT) {				$Students = Student::getWithContract();								foreach ($Students as $Student) {					$Contracts = $Student->getActiveContracts();					foreach ($Contracts as $Contract) {						foreach ($Contract->subjects as $Subject) {							$id_subject = $Subject['id_subject'];							$result[$Contract->grade][$id_subject]++;						}					}				}								return $result;			} else {				$result = memcached()->get("SumRating");				if (!$result) {					$Students = Student::getWithContract();										foreach ($Students as $Student) {						$Contracts = $Student->getActiveContracts();						foreach ($Contracts as $Contract) {							foreach ($Contract->subjects as $Subject) {								$id_subject = $Subject['id_subject'];								$result[$Contract->grade][$id_subject]++;							}						}					}										memcached()->set("SumRating", $result, 1 * 3600); // кеш на 1 час				}				return $result;			}		}		##################################################		###################### AJAX ######################		##################################################	}