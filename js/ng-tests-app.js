// Generated by CoffeeScript 1.10.0
angular.module("Tests", ['ngSanitize']).filter('unsafe', function($sce) {
  return $sce.trustAsHtml;
}).filter('range', function() {
  return function(input, total) {
    var i, j, ref;
    total = parseInt(total);
    for (i = j = 1, ref = total + 1; j < ref; i = j += 1) {
      input.push(i);
    }
    return input;
  };
}).controller("StartCtrl", function($scope, $timeout, $interval) {
  var finishTest, saveAnswers;
  $timeout(function() {
    if ($scope.final_score === void 0) {
      $scope.interval = $interval(function() {
        return $scope.time++;
      }, 1000);
    }
    $scope.current_problem = localStorage.getItem("current_problem_" + $scope.Test.id);
    if ($scope.current_problem === null) {
      return $scope.current_problem = 0;
    }
  });
  $scope.counter = function() {
    return moment({}).seconds($scope.time).format("mm:ss");
  };
  $scope.nextProblem = function() {
    saveAnswers();
    if (($scope.Test.Problems.length - $scope.current_problem) === 1) {
      return finishTest();
    } else {
      return $scope.current_problem++;
    }
  };
  $scope.prevProblem = function() {
    saveAnswers();
    return $scope.current_problem--;
  };
  saveAnswers = function() {
    return $.cookie("answers" + $scope.Test.id, JSON.stringify($scope.answers), {
      expires: 3,
      path: '/'
    });
  };
  finishTest = function() {
    return $.post("tests/ajaxFinishTest", {
      id: $scope.Test.id
    }, function(final_score) {
      $interval.cancel($scope.interval);
      return $scope.final_score = final_score;
    });
  };
  $scope.back = function() {
    return redirect("students/tests");
  };
  $scope.notFinished = function() {
    return $scope.final_score === void 0;
  };
  $scope.$watch('current_problem', function(newVal) {
    if (newVal !== void 0) {
      localStorage.setItem("current_problem_" + $scope.Test.id, newVal);
      return $scope.Problem = $scope.Test.Problems[newVal];
    }
  });
  return angular.element(document).ready(function() {
    return set_scope("Tests");
  });
}).controller("ListCtrl", function($scope) {
  $scope.formatDate = function(date) {
    return moment(date).format('DD MMMM');
  };
  $scope.getTestStatus = function(Test) {
    return test_statuses[Test.intermediate];
  };
  return angular.element(document).ready(function() {
    return set_scope("Tests");
  });
}).controller("AddCtrl", function($scope, $timeout) {
  $scope.addTest = function(Test) {
    $scope.adding = true;
    ajaxStart();
    return $.post('tests/ajaxAdd', {
      Test: $scope.Test
    }, function(response) {
      return redirect("tests/edit/" + response);
    }, "json");
  };
  $scope.saveTest = function() {
    $scope.saving = true;
    ajaxStart();
    return $.post("tests/ajaxEdit", {
      Test: $scope.Test
    }, function(response) {
      ajaxEnd();
      $scope.saving = false;
      $scope.form_changed = false;
      return $scope.$apply();
    });
  };
  $scope.deleteTest = function() {
    return bootbox.confirm("Вы уверены, что хотите удалить тест №" + $scope.Test.id + "?", function(result) {
      if (result === true) {
        ajaxStart();
        return $.post("tests/ajaxDeleteTest", {
          id_test: $scope.Test.id
        }, function() {
          return redirect("tests");
        });
      }
    });
  };
  $scope.addProblem = function() {
    $scope.form_changed = true;
    return $scope.Test.Problems.push(angular.copy($scope.NewProblem));
  };
  $scope.editingAnswer = function(parent_index, index) {
    return $scope.editing_answer && $scope.editing_answer[0] === parent_index && $scope.editing_answer[1] === index;
  };
  $scope.addAnswer = function(Problem, parent_index) {
    $scope.form_changed = true;
    Problem.answers.push('текст ответа...');
    return $timeout(function() {
      return $scope.editAnswer(Problem, parent_index, Problem.answers.length - 1);
    });
  };
  $scope.setCorrect = function(Problem, index) {
    if (typeof $scope.a === "object") {
      Problem.answers[index] = $scope.a.getData();
      $scope.a.destroy();
      delete $scope.a;
    }
    $scope.form_changed = true;
    $scope.editing_answer = void 0;
    if (Problem.correct_answer === index) {
      return Problem.correct_answer = -1;
    } else {
      return Problem.correct_answer = index;
    }
  };
  $scope.deleteAnswer = function(Problem, index) {
    if (Problem.correct_answer) {
      if (Problem.correct_answer === index) {
        Problem.correct_answer = -1;
      }
      if (Problem.correct_answer > index) {
        Problem.correct_answer--;
      }
    }
    $scope.a.destroy();
    delete $scope.a;
    $scope.form_changed = true;
    $scope.editing_answer = void 0;
    return Problem.answers.splice(index, 1);
  };
  $scope.deleteProblem = function(Problem, index) {
    $scope.e.destroy();
    delete $scope.e;
    $scope.editing_problem = void 0;
    $scope.Test.Problems.splice(index, 1);
    if (Problem.id) {
      return $.post("tests/ajaxDeleteProblem", {
        id_problem: Problem.id
      });
    }
  };
  $scope.editAnswer = function(Problem, parent_index, index) {
    var answer;
    console.log(parent_index, index);
    answer = Problem.answers[index];
    if ($scope.a) {
      Problem.answers[$scope.editing_answer[1]] = $scope.a.getData();
    }
    $scope.editing_answer = [parent_index, index];
    $scope.old_html = answer;
    if (typeof $scope.a === "object") {
      $scope.a.destroy();
    }
    $scope.a = CKEDITOR.replace("answer-" + parent_index + "-" + index, {
      language: 'ru',
      height: 150,
      title: "testy",
      extraPlugins: 'pastebase64,panel,button,panelbutton,colorbutton'
    });
    $scope.a.setData(answer);
    $scope.a.on('contentDom', function() {
      return $scope.a.document.on('keydown', function(event) {
        event = event.data.$;
        if (event.which === 13 && (event.ctrlKey || event.metaKey) || (event.which === 19)) {
          Problem.answers[index] = $scope.a.getData();
          $scope.a.destroy();
          delete $scope.a;
          $scope.editing_answer = void 0;
          $scope.form_changed = true;
          $scope.$apply();
        }
        if (event.which === 27) {
          Problem.answers[index] += " ";
          $scope.a.destroy();
          delete $scope.a;
          $scope.editing_answer = void 0;
          return $scope.$apply();
        }
      });
    });
    return $scope.a.on('instanceReady', function(event) {
      $scope.a.focus().select;
      return $scope.a.execCommand('selectAll');
    });
  };
  $scope.editProblem = function(Problem, index) {
    $scope.editing_problem = Problem;
    $scope.old_html = Problem.problem;
    if (typeof $scope.e === "object") {
      $scope.e.destroy();
    }
    $scope.e = CKEDITOR.replace("problem-" + index, {
      language: 'ru',
      height: 250,
      title: "testy",
      extraPlugins: 'pastebase64,panel,button,panelbutton,colorbutton'
    });
    $scope.e.setData(Problem.problem);
    $scope.e.on('contentDom', function() {
      return $scope.e.document.on('keydown', function(event) {
        event = event.data.$;
        if (event.which === 13 && (event.ctrlKey || event.metaKey) || (event.which === 19)) {
          Problem.problem = $scope.e.getData();
          $scope.e.destroy();
          delete $scope.e;
          $scope.editing_problem = void 0;
          $scope.form_changed = true;
          $scope.$apply();
        }
        if (event.which === 27) {
          Problem.problem += " ";
          $scope.e.destroy();
          delete $scope.e;
          $scope.editing_problem = void 0;
          return $scope.$apply();
        }
      });
    });
    return $scope.e.on('instanceReady', function(event) {
      $scope.e.focus().select;
      return $scope.e.execCommand('selectAll');
    });
  };
  return angular.element(document).ready(function() {
    $(".form-change-control").on('keyup change', 'input, select', function() {
      $scope.form_changed = true;
      return $scope.$apply();
    });
    $timeout(function() {
      return $scope.$broadcast('angucomplete-alt:clearInput');
    });
    return set_scope('Tests');
  });
});
