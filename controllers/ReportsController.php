<?php	// Контроллер отчетов	class ReportsController extends Controller	{		public $defaultAction = "add";		public static $allowed_users = [User::USER_TYPE, Teacher::USER_TYPE, Student::USER_TYPE];		// Папка вьюх		protected $_viewsFolder	= "report";		public function beforeAction()		{			$this->addJs("ng-reports-app");		}		public function actionView()		{			$this->_custom_panel = true;			$Report				= Report::findById($_GET['id']);			$Report->Student	= Student::findById($Report->id_student);			$Report->Teacher	= Teacher::findById($Report->id_teacher);			$ang_init_data = angInit([				"Report" 		=> $Report,				"Subjects"		=> Subjects::$dative,			]);			$this->render("view", [				'ang_init_data' => $ang_init_data,			]);		}		public function actionList()		{			if (User::fromSession()->type == Teacher::USER_TYPE) {				$this->_teacherList();			}			if (User::fromSession()->type == Student::USER_TYPE) {				$this->_studentList();			}			if (User::fromSession()->type == User::USER_TYPE) {				$this->_userList();			}		}		private function _teacherList()		{            $year = isset($_GET['year']) ? $_GET['year'] : academicYear();            $id_teacher = User::fromSession()->id_entity;			$this->_custom_panel = true;            $data = ReportHelper::findAll([                'condition' => "year={$year} AND id_teacher={$id_teacher}",                'group' => 'id_student, id_subject, id_teacher, year'            ]);            foreach($data as $d) {                $d->Student = Student::getLight($d->id_student);                $d->lessons_count   = Report::getLessonsCount($d->id_student, $id_teacher, $d->id_subject, $year);                $d->reports_count   = Report::getCount($d->id_student, $id_teacher, $d->id_subject, $year);                $d->report_required = Report::required($d->id_student, $id_teacher, $d->id_subject, $year);            }            // dd($data);			$ang_init_data = angInit([				'data'	=> $data,				'Subjects' 	=> Subjects::$dative,			]);			$this->render("teacher_list", [				'ang_init_data' => $ang_init_data,                'year'          => $year,			]);		}		private function _userList()		{			$this->_custom_panel = true;			$this->addJs("bootstrap-select");			$this->addCss("bootstrap-select");			$ang_init_data = angInit([				'Subjects' 		=> Subjects::$all,				'Teachers'		=> Teacher::getJournalTeachers(),				'three_letters' => Subjects::$three_letters,				'reports_updated' => Settings::get('reports_updated'),				'currentPage'	=> $_GET['page'] ? $_GET['page'] : 1,			]);			$this->render("user_list", [				"ang_init_data" => $ang_init_data,			]);		}		private function _studentList()		{		    /* @var Student $Student */			$Student = Student::findById(User::fromSession()->id_entity);			$Student->AllVisits = $Student->getVisits();            // группы в которых ученик записан и которых посещал когда-либо.            // чтобы в списке отчетев были и преподы с которыми еще не начались занятия, и из которых был выкинут.            $group_ids = array_merge(                VisitJournal::getGroupIds($Student->id),                Group::getIds(["condition" => "FIND_IN_SET({$Student->id}, students)"], true)            );            $StudentGroups = Group::findAll([                'condition' => 'id in (' . implode(',', array_unique($group_ids)) . ')'            ], true);            $Teachers = [];            foreach ($StudentGroups as $Group) {                $Teachers[$Group->id_teacher] = $Group->Teacher;            }            $Visits = [];            // Group visits by subject            foreach ($StudentGroups as $Group) {                foreach ($Student->AllVisits as $Visit) {                    if ($Visit->id_group == $Group->id && $Visit->id_teacher == $Group->id_teacher) {                        $Visits[$Visit->id_teacher][$Visit->id_subject][] = $Visit;                    }                }                if (empty($Visits[$Group->id_teacher])) {                    $Visits[$Group->id_teacher][$Group->id_subject] = false;                }            }			unset($Student->AllVisits);			// Get reports            $PlannedLessons = [];			foreach ($Visits as $id_teacher => $data) {				foreach($data as $id_subject => $Visit) {				    /* @var Group $Group */                    $Group = findObjectInArray($StudentGroups, ['id_subject' => $id_subject, 'id_teacher' => $id_teacher]);					if ($Group->inGroup($Student->id)) {						$PlannedLessons[$id_teacher][$id_subject] = $Group->countFutureSchedule();					} else {						$PlannedLessons[$id_teacher][$id_subject] = false;					}					$Reports = Report::findAll([						"condition" => "available_for_parents = 1 AND id_student = " . $Student->id . "							AND id_subject = " . $id_subject ." AND id_teacher = " . $id_teacher					]);					// ВНИМАНИЕ: ДОБАВЛЯЕМ ОТЧЕТЫ В МАССИВ visits!					foreach ($Reports as $Report) {						// внимание!						$Report->lesson_date = date("Y-m-d", strtotime($Report->date));						$Visits[$id_teacher][$id_subject][] = $Report;					}					// Sort visits by SO CALLED lesson_date					usort($Visits[$id_teacher][$id_subject], function($a, $b) {						return $a->lesson_date > $b->lesson_date;					});				}			}			$ang_init_data = angInit([				'Visits' => $Visits,				'Teachers' => $Teachers,				'PlannedLessons' => $PlannedLessons,				'Subjects' => Subjects::$all,				'SubjectsDative' => Subjects::$dative,			]);			$this->setTabTitle('Отчёты');			$this->render("student_list", [				'ang_init_data' => $ang_init_data,			]);		}		public function actionStudent()		{			$id_student = $_GET['id_student'];            $id_subject = $_GET['id_subject'];            $id_teacher = User::fromSession()->id_entity;			$Student = Student::findById($id_student, true);			$Visits = $Student->getVisits(compact('id_teacher', 'id_subject'));            $Reports = Report::get($id_student, $id_teacher, $id_subject);            $group_ids = Group::getIds([                "condition" => "FIND_IN_SET($id_student, students) AND id_subject={$id_subject}                    AND ended=0 AND id_teacher={$id_teacher}"            ]);			foreach ($Visits as $Visit) {                $Visit->cabinet_number = Cabinet::getField($Visit->cabinet, 'number');            }            // ВНИМАНИЕ: ДОБАВЛЯЕМ ОТЧЕТЫ В МАССИВ visits!            foreach ($Reports as $Report) {                // внимание!                $Report->lesson_date = date("Y-m-d", strtotime($Report->date));                $Visits[] = $Report;            }            // Sort visits by SO CALLED lesson_date            usort($Visits, function($a, $b) {                return $a->lesson_date > $b->lesson_date;            });			$ang_init_data = angInit([				'Student'         => $Student,                'Visits'          => $Visits,                'group_ids'       => $group_ids,                'report_required' => Report::required($id_student, $id_teacher, $id_subject, academicYear()),                'Subject'         => [                    'id'     => $id_subject,                    'title'  => Subjects::$all[$id_subject],                    'dative' => Subjects::$dative[$id_subject]                ]			]);			$this->setTabTitle('Добавление отчета');			$this->render('add_student', [				'ang_init_data' => $ang_init_data,			]);		}		public function actionEdit()		{			$this->setRights([User::USER_TYPE, Teacher::USER_TYPE]);			$Report = Report::findById($_GET['id']);			$Report->email = $Report->getEmail();			$this->actionAdd($Report);		}		public function actionAdd($Report = false)		{			$this->_custom_panel = true;			if ($Report) {				$Report->Student = Student::findById($Report->id_student);				$Report->Teacher = Teacher::findById($Report->id_teacher);			} else {				$id_student = $_GET["id_student"];				$id_subject = $_GET["id_subject"];				$Report = new Report([					"id_student" => $id_student,					"id_subject" => $id_subject,					"id_teacher" => User::fromSession()->id_entity,				]);				$Report->Student = Student::findById($id_student);				$Report->Teacher = Teacher::findById(User::fromSession()->id_entity);			}			$ang_init_data = angInit([				"Report" 	=> $Report,				"Subjects"	=> Subjects::$dative,				"SubjectsFull" => Subjects::$full,			]);			$this->render("add", [				'ang_init_data' => $ang_init_data,			]);		}		public function actionAjaxAdd()		{			extract($_POST);			$NewReport = Report::add($Report);		}		public function actionAjaxEdit()		{			extract($_POST);			Report::updateById($Report['id'], $Report);			preType($Report);		}		public function actionAjaxDelete()		{			extract($_POST);			Report::deleteById($id_report);		}		public function actionAjaxGetReports()		{			extract($_POST);			$data = Teacher::getReportData($page, $teachers);			returnJsonAng($data);		}		public function actionAjaxForceNoreport()		{			extract($_POST);			ReportForce::toggle($id_student, $id_teacher, $id_subject, $year);		}		public function actionAjaxRecalcHelper()		{			returnJsonAng([				'date' 		=> ReportHelper::recalc(),				'red_count'	=> Teacher::redReportCountAll()			]);		}	}