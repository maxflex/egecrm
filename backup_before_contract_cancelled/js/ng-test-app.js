// Generated by CoffeeScript 1.9.3
var indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

angular.module("Test", ["ngMap"]).filter('range', function() {
  return function(input, total) {
    var i, j, ref;
    total = parseInt(total);
    for (i = j = 1, ref = total + 1; j < ref; i = j += 1) {
      input.push(i);
    }
    return input;
  };
}).controller("Egecentr", function($scope) {
  $scope.formatDate = function(d) {
    return moment(d).format("DD MMM");
  };
  return angular.element(document).ready(function() {
    set_scope("Test");
    return $.post("ajax/Egecentr", {}, function(response) {
      $scope.data_2014 = response;
      return $scope.$apply();
    }, "json");
  });
}).controller("MapCtrl", function($scope) {
  return $scope.$on('mapInitialized', function(event, map) {
    map.setCenter(MAP_CENTER);
    return google.maps.event.addListener(map, 'click', function(event) {
      var marker;
      marker = addMarker(map, event.latLng);
      return getDistance(event.latLng, function(response) {
        $scope.data = response;
        return $scope.$apply();
      });
    });
  });
}).controller("ClientsMapCtrl", function($scope) {
  $scope.filters = {
    branches_invert: [],
    branches: [],
    subjects: [],
    grades: [],
    marker_home: true,
    marker_school: true
  };
  $scope.markers = [];
  $scope.info_windows = [];
  $scope.inArray = function(id_branch, arr) {
    var ref;
    console.log(parseInt(id_branch), arr);
    return ref = parseInt(id_branch), indexOf.call(arr, ref) >= 0;
  };
  $scope.toggleFilter = function(filter, id, index) {
    id = parseInt(id);
    switch (filter) {
      case "branch_invert":
        if (indexOf.call($scope.filters.branches_invert, id) >= 0) {
          $scope.filters.branches_invert.splice($.inArray(id, $scope.filters.branches_invert), 1);
        } else {
          $scope.filters.branches_invert.push(id);
        }
        break;
      case "branch":
        if (indexOf.call($scope.filters.branches, id) >= 0) {
          $scope.filters.branches.splice($.inArray(id, $scope.filters.branches), 1);
        } else {
          $scope.filters.branches.push(id);
        }
        break;
      case "grade":
        if (indexOf.call($scope.filters.grades, id) >= 0) {
          $scope.filters.grades.splice($.inArray(id, $scope.filters.grades), 1);
        } else {
          $scope.filters.grades.push(id);
        }
        break;
      case "subject":
        if (indexOf.call($scope.filters.subjects, id) >= 0) {
          $scope.filters.subjects.splice($.inArray(id, $scope.filters.subjects), 1);
        } else {
          $scope.filters.subjects.push(id);
        }
    }
    return $scope.runRequest();
  };
  $scope.runRequest = function() {
    frontendLoadingStart();
    return $.get("ajax/clientsMap", $scope.filters, function(response) {
      var Student, j, k, l, len, len1, len2, marker, new_marker, ref, ref1;
      frontendLoadingEnd();
      ref = $scope.markers;
      for (j = 0, len = ref.length; j < len; j++) {
        marker = ref[j];
        marker.setMap(null);
      }
      $scope.markers = [];
      $scope.info_windows = [];
      if (response) {
        for (k = 0, len1 = response.length; k < len1; k++) {
          Student = response[k];
          if (Student.markers === void 0) {
            continue;
          }
          ref1 = Student.markers;
          for (l = 0, len2 = ref1.length; l < len2; l++) {
            marker = ref1[l];
            if (marker.type === "school" && !$scope.filters.marker_school) {
              continue;
            }
            if (marker.type === "home" && !$scope.filters.marker_home) {
              continue;
            }
            new_marker = newMarker(marker.id, new google.maps.LatLng(marker.lat, marker.lng), $scope.gmap, marker.type);
            new_marker.id_owner = marker.id_owner;
            $scope.markers.push(new_marker);
            $scope.info_windows[new_marker.id] = new google.maps.InfoWindow({
              content: "<a target='_blank' href='student/" + Student.id + "'>" + Student.last_name + " " + Student.first_name + " " + Student.middle_name + "</a>\n<div>" + Student.Contract.grade + " класс, " + Student.subjects_string + "</div>\n<div>" + Student.branches_string + "</div>"
            });
            new_marker.setMap($scope.gmap);
            new_marker.addListener("click", function() {
              var len3, m, n, ref2, results;
              if ($scope.prev_info_window_id !== void 0 && $scope.info_windows[$scope.prev_info_window_id] !== void 0) {
                $scope.info_windows[$scope.prev_info_window_id].close();
              }
              $scope.prev_info_window_id = this.id;
              $scope.info_windows[this.id].open($scope.gmap, this);
              ref2 = $scope.markers;
              results = [];
              for (n = 0, len3 = ref2.length; n < len3; n++) {
                m = ref2[n];
                if (m.id_owner === this.id_owner) {
                  m.setMap(null);
                  if (m.type === "school") {
                    m.type = "school_blue";
                    m.icon = ICON_SCHOOL_BLUE;
                  } else {
                    m.type = "home_blue";
                    m.icon = ICON_HOME_BLUE;
                  }
                  results.push(m.setMap($scope.gmap));
                } else {
                  switch (m.type) {
                    case "home_blue":
                      m.type = "home";
                      m.icon = ICON_HOME;
                      m.setMap(null);
                      results.push(m.setMap($scope.gmap));
                      break;
                    case "school_blue":
                      m.type = "home";
                      m.icon = ICON_SCHOOL;
                      m.setMap(null);
                      results.push(m.setMap($scope.gmap));
                      break;
                    default:
                      results.push(void 0);
                  }
                }
              }
              return results;
            });
          }
        }
      }
      return $scope.$apply();
    }, "json");
  };
  $scope.$on('mapInitialized', function(event, map) {
    map.setCenter(MAP_CENTER);
    return $scope.gmap = map;
  });
  return angular.element(document).ready(function() {
    return set_scope("Test");
  });
});
