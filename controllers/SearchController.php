<?php
# Контроллерclass SearchController extends Controller{    public $defaultAction = "search";    private static $resultsInSearch = 30;    // Папка вьюх    protected $_viewsFolder = "search";    private function microtime_float()    {        list($usec, $sec) = explode(" ", microtime());        return ((float)$usec + (float)$sec);    }    /**     * Новый поиск     * @param string $keyword поисковый запрос     */    private function search($query)    {        # замер скорости поиска, старт        $start = $this->microtime_float();        # удаляем все тире, чтобы искалось по номеру телефона и так, и так        $query = str_replace("-", "", $query);        # очистка и разбиение запроса на ключевые слова и формирование текста для FULLTEXT        $query = trim($query);        $queryArray = explode(' ', $query);        # результативные и промежуточные массивы        $Students = []; # массив для хранения учеников        $Tutors = []; # массив для храненния преподавателей        $Requests = []; # массив для хранения результатов поиска по заявкам        $Representatives = []; # массив для хранения преставителей        $Contracts = []; # массив для хранения контракты        # запрос по поиску студента        $sqlSearchStudents = "SELECT                                id, first_name, last_name, middle_name                              FROM                                students                              WHERE                                " . $this->sqlLikeGenerator($queryArray) . "                               LIMIT " . self::$resultsInSearch;        $studientsResult = dbConnection()->query($sqlSearchStudents);        if ($studientsResult->num_rows) {            while ($row = $studientsResult->fetch_object()) {                $Students[] = $row;            }        }        # запрос по поиску представителя        $sqlSearchRepresentatives = "SELECT                                id, first_name, last_name, middle_name                              FROM                                representatives                              WHERE                               " . $this->sqlLikeGenerator($queryArray) . "                               LIMIT " . self::$resultsInSearch;        #  обработка ответа по представителям        $representativesResult = dbConnection()->query($sqlSearchRepresentatives);        if ($representativesResult->num_rows > 0) {            while ($row = $representativesResult->fetch_object()) {                $Representatives[] = $row;            }        }        # запрос по поиску преподавателя        $sqlSearchTutors = "SELECT                                id, first_name, last_name, middle_name                              FROM                                tutors                              WHERE                                " . $this->sqlLikeGenerator($queryArray) . "                               LIMIT " . self::$resultsInSearch;        #  обработка ответа по преподователям        $tutorsResult = dbEgerep()->query($sqlSearchTutors);        if ($tutorsResult->num_rows > 0) {            while ($row = $tutorsResult->fetch_object()) {                $Tutors[] = $row;            }        }        # запрос по поиску заявок        $sqlSearchRequest = "SELECT                                id, name, phone, phone2, phone3                              FROM                                requests                              WHERE                                " . $this->sqlLikeGenerator($queryArray, ['name', 'phone', 'phone2', 'phone3']) . "                               LIMIT " . self::$resultsInSearch;        # обработка ответа по заявкам        $requestResult = dbConnection()->query($sqlSearchRequest);        if ($requestResult->num_rows > 0) {            while ($row = $requestResult->fetch_object()) {                $Requests[] = $row;            }        }        # запрос по поиску по номеру договора        $sqlSearchContacts = "SELECT                                id_contract, id_student                              FROM                                contract_info                              WHERE                              " . $this->sqlLikeGenerator($queryArray, ['id_contract']) . "                               LIMIT " . self::$resultsInSearch;        # обработка ответа по договорам        $contractsResult = dbConnection()->query($sqlSearchContacts);        if ($contractsResult->num_rows > 0) {            while ($row = $contractsResult->fetch_object()) {                $Contracts[] = $row;            }        }        # окончание работы таймера        $end = $this->microtime_float();        header('Content-Type: application/json'); # все равно без заголовка не хочет отдавать в json корректно        if (!count($Students) && !count($Tutors) && !count($Requests) && !count($Representatives) && !count($Contracts)) {            // не найдено            return [                'result' => 0,                'search' => []            ];        } else {            return returnJson([                'timing' => $end - $start,                'result' => count($Students) + count($Tutors) + count($Requests) + count($Representatives) + count($Contracts),                'search' => [                    "students" => $Students,                    "tutors" => $Tutors,                    'requests' => $Requests,                    'representatives' => $Representatives,                    'contracts' => $Contracts                ]            ]);        }    }    /**     * формирвоание части запроса     * @param array $words     * @param array $fields     */    private function sqlLikeGenerator($words = [], $fields = ['first_name', 'last_name', 'middle_name', 'email', 'phone', 'phone2', 'phone3'])    {        $querys = [];        foreach ($words as $z => $word) {            $subQuery = '(';            $subQuery .= implode(" like '%" . $word . "%' OR ", $fields) . " like '%" . $word . "%'";            $subQuery .= ')';            $querys[] = $subQuery;        }        return implode(' AND ', $querys);    }    public function actionSearch()    {        //проверяем на наличеи в запросе данных, что надо выводить в json        if (!empty($_POST['query'])) {            $res = $this->search($_POST['query']);            echo json_encode($res);        } else {            echo json_encode(['error' => 'bad request']);        }        exit;    }}