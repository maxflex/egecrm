// Generated by CoffeeScript 1.9.3
var indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

angular.module("Group", []).filter('to_trusted', [
  '$sce', function($sce) {
    return function(text) {
      return $sce.trustAsHtml(text);
    };
  }
]).filter('range', function() {
  return function(input, total) {
    var i, j, ref;
    total = parseInt(total);
    for (i = j = 1, ref = total + 1; j < ref; i = j += 1) {
      input.push(i);
    }
    return input;
  };
}).controller("ScheduleCtrl", function($scope) {
  $scope.schedulde_loaded = false;
  $scope.getLine1 = function(Schedule) {
    return moment(Schedule.date).format("D MMMM YYYY г.");
  };
  $scope.setTimeFromGroup = function(Group) {
    $.each($scope.Group.Schedule, function(i, v) {
      if (!v.time) {
        return v.time = Group.start;
      }
    });
    $.post("groups/ajax/TimeFromGroup", {
      id_group: Group.id,
      time: Group.start
    });
    return $scope.$apply();
  };
  $scope.setTime = function(Schedule, event) {
    $(event.target).hide();
    $(event.target).parent().children("input").show().on("changeTime, blur", function(e) {
      var time;
      time = $(this).val();
      if (time) {
        Schedule.time = time;
        $.post("groups/ajax/AddScheduleTime", {
          time: time,
          date: Schedule.date,
          id_group: $scope.Group.id
        });
        $scope.$apply();
      }
      return $(this).hide().parent().children("span").html(time ? time : "не установлено").show();
    }).focus();
    return false;
  };
  $scope.getInitParams = function(el) {
    var current_date, month, year;
    month = parseInt($(el).attr("month"));
    year = month >= 8 ? parseInt(moment().format("YYYY")) : moment().add(1, "years").format("YYYY");
    current_date = new Date(year + "-" + month + "-01");
    return {
      language: 'ru',
      startDate: current_date,
      endDate: moment(current_date).endOf("month").toDate(),
      multidate: true,
      beforeShowDay: function(d) {
        var ref;
        if (ref = moment(d).format("YYYY-MM-DD"), indexOf.call($scope.vocation_dates, ref) >= 0) {
          return 'vocation';
        }
      }
    };
  };
  $scope.monthName = function(month) {
    return moment().month(month - 1).format("MMMM");
  };
  $scope.dateChange = function(e) {
    var d, t;
    if (!$scope.schedule_loaded) {
      return;
    }
    d = moment(clicked_date).format("YYYY-MM-DD");
    $scope.Group.Schedule = initIfNotSet($scope.Group.Schedule);
    t = $scope.Group.Schedule.filter(function(schedule) {
      return schedule.date === d;
    });
    if (t.length === 0) {
      $scope.Group.Schedule.push({
        date: d
      });
      $.post("groups/ajax/AddScheduleDate", {
        date: d,
        id_group: $scope.Group.id
      });
    } else {
      $.each($scope.Group.Schedule, function(i, v) {
        if (v !== void 0) {
          if (v.date === d) {
            return $scope.Group.Schedule.splice(i, 1);
          }
        }
      });
      $.post("groups/ajax/DeleteScheduleDate", {
        date: d,
        id_group: $scope.Group.id
      });
    }
    return $scope.$apply();
  };
  return angular.element(document).ready(function() {
    var init_dates, j, len, ref, schedule_date;
    set_scope('Group');
    init_dates = [];
    ref = $scope.Group.Schedule;
    for (j = 0, len = ref.length; j < len; j++) {
      schedule_date = ref[j];
      init_dates.push(new Date(schedule_date.date));
    }
    console.log(init_dates);
    $(".calendar-month").each(function() {
      var d, k, len1, m, month_number;
      $(this).datepicker($scope.getInitParams(this)).on("changeDate", $scope.dateChange);
      m = $(this).attr("month");
      for (k = 0, len1 = init_dates.length; k < len1; k++) {
        d = init_dates[k];
        month_number = moment(d).format("M");
        if (month_number === m) {
          $(this).datepicker("_setDate", d);
        }
      }
      return setTimeout(function() {
        $scope.schedule_loaded = true;
        return $scope.$apply();
      }, 500);
    });
    $(".table-condensed").first().children("thead").css("display", "table-caption");
    return $(".table-condensed").eq(15).children("tbody").children("tr").first().remove();
  });
}).controller("EditCtrl", function($scope) {
  $scope.weekdays = [
    {
      "short": "ПН",
      "full": "Понедельник"
    }, {
      "short": "ВТ",
      "full": "Вторник"
    }, {
      "short": "СР",
      "full": "Среда"
    }, {
      "short": "ЧТ",
      "full": "Четверг"
    }, {
      "short": "ПТ",
      "full": "Пятница"
    }, {
      "short": "СБ",
      "full": "Суббота"
    }, {
      "short": "ВС",
      "full": "Воскресенье"
    }
  ];
  $scope.setStudentStatus = function(Student, event) {
    console.log(event.target);
    $(event.target).hide();
    $(".student-status-select-" + Student.id).show(0, function() {
      $(this).simulate('mousedown');
      return $("option[value^='?']").remove();
    });
    return false;
  };
  $scope.teachersFilter = function(Teacher) {
    var ref, ref1;
    return ((ref = parseInt($scope.Group.id_branch), indexOf.call(Teacher.branches, ref) >= 0) || !$scope.Group.id_branch) && ((ref1 = parseInt($scope.Group.id_subject), indexOf.call(Teacher.subjects, ref1) >= 0) || !$scope.Group.id_subject);
  };
  $scope.countSubjects = function(Contract) {
    return Object.keys(Contract.subjects).length;
  };
  $scope.bindGroupStudentStatusChange = function() {
    return $("select[class^='student-status-select']").on("input blur", function() {
      var id_student;
      $(this).hide();
      id_student = $(this).data("id");
      $(".student-status-span-" + id_student).show();
      return $scope.Group.student_statuses[id_student] = $(this).val();
    });
  };
  $scope.addStudent = function(id_student) {
    if (indexOf.call($scope.Group.students, id_student) < 0) {
      $scope.Group.students.push(id_student);
      $scope.form_changed = true;
      $scope.$apply();
      return $scope.bindGroupStudentStatusChange();
    }
  };
  $scope.removeStudent = function(id_student) {
    return $.each($scope.Group.students, function(index, data) {
      if (data === id_student) {
        console.log(data, index);
        $scope.Group.students.splice(index, 1);
        $scope.form_changed = true;
        return $scope.$apply();
      }
    });
  };
  $scope.studentAdded = function(id_student) {
    return indexOf.call($scope.Group.students, id_student) >= 0;
  };
  $scope.getStudent = function(id_student) {
    var Student, i;
    return Student = ((function() {
      var j, len, ref, results;
      ref = $scope.Students;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        i = ref[j];
        if (i.id === id_student) {
          results.push(i);
        }
      }
      return results;
    })())[0];
  };
  $scope.search = {
    grade: "",
    id_branch: "",
    id_subject: ""
  };
  $scope.clientsFilter = function(Student) {
    var ref;
    return (Student.Contract.grade === parseInt($scope.search.grade) || !$scope.search.grade) && ((ref = parseInt($scope.search.id_branch), indexOf.call(Student.branches, ref) >= 0) || !$scope.search.id_branch) && (Student.Contract.subjects && (parseInt($scope.search.id_subject) in Student.Contract.subjects || !$scope.search.id_subject));
  };
  $scope.deleteGroup = function(id_group) {
    return bootbox.confirm("Вы уверены, что хотите удалить группу №" + id_group + "?", function(result) {
      if (result === true) {
        ajaxStart();
        return $.post("groups/ajax/delete", {
          id_group: id_group
        }, function() {
          return redirect("groups");
        });
      }
    });
  };
  $scope.changeBranch = function() {
    $scope.Group.cabinet = void 0;
    return setTimeout(function() {
      return $("option[value^='?']").remove();
    }, 50);
  };
  $scope.addClientsPanel = function() {
    $scope.add_clients_panel = !$scope.add_clients_panel;
    if (!$scope.search.grade && $scope.Group.grade) {
      $scope.search.grade = $scope.Group.grade;
    }
    if (!$scope.search.id_subject && $scope.Group.id_subject) {
      $scope.search.id_subject = $scope.Group.id_subject;
    }
    if (!$scope.search.id_branch && $scope.Group.id_branch) {
      $scope.search.id_branch = $scope.Group.id_branch;
      $scope.$apply();
      return $("#group-branch-filter").selectpicker('render');
    }
  };
  $scope.loadStudents = function() {
    $scope.add_clients_panel = 0;
    $scope.Students = false;
    return $.post("groups/ajax/getStudents", {
      id_group: $scope.Group.id,
      id_subject: $scope.Group.id_subject
    }, function(response) {
      $scope.Students = response;
      return $scope.$apply();
    }, "json");
  };
  angular.element(document).ready(function() {
    set_scope("Group");
    $scope.loadStudents();
    $scope.bindGroupStudentStatusChange();
    if ($scope.Group.Comments === false) {
      $scope.Group.Comments = [];
    }
    return frontendLoadingEnd();
  });
  $(document).ready(function() {
    return $("#group-edit").on('keyup change', 'input, select, textarea', function() {
      $scope.form_changed = true;
      return $scope.$apply();
    });
  });
  return $(".save-button").on("mousedown", function() {
    ajaxStart();
    $scope.saving = true;
    $scope.$apply();
    return $.post("groups/ajax/save", $scope.Group, function(response) {
      if ($scope.Group.id) {
        ajaxEnd();
        $scope.saving = false;
        $scope.form_changed = false;
        return $scope.$apply();
      } else {
        return redirect("groups/edit/" + response);
      }
    });
  });
}).controller("ListCtrl", function($scope) {
  $scope.search = {
    grade: "",
    id_branch: "",
    id_subject: ""
  };
  return $scope.groupsFilter = function(Group) {
    return (Group.grade === parseInt($scope.search.grade) || !$scope.search.grade) && (parseInt($scope.search.id_branch) === Group.id_branch || !$scope.search.id_branch) && (parseInt($scope.search.id_subject) === Group.id_subject || !$scope.search.id_subject);
  };
});
